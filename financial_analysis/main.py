"""
File ch√≠nh ƒë·ªÉ ch·∫°y to√†n b·ªô h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh
Main file to run the complete financial analysis system

Ch·ª©c nƒÉng:
- T·∫°o file Excel b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n v·ªõi d·ªØ li·ªáu m·∫´u
- T·∫°o file Excel ph√¢n t√≠ch t√†i ch√≠nh v·ªõi c√°c ch·ªâ s·ªë v√† bi·ªÉu ƒë·ªì
- Li√™n k·∫øt gi·ªØa c√°c file ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t
- Xu·∫•t b√°o c√°o t·ªïng h·ª£p

S·ª≠ d·ª•ng:
    python main.py
    
Ho·∫∑c import v√† s·ª≠ d·ª•ng:
    from main import FinancialAnalysisSystem
    system = FinancialAnalysisSystem()
    system.run_complete_analysis()
"""

import os
import sys
from datetime import datetime
import traceback

# Import c√°c module t·ª± t·∫°o
from data_source import FinancialDataSource, get_sample_data
from balance_sheet_generator import BalanceSheetGenerator, create_balance_sheet_file
from financial_analysis_generator import FinancialAnalysisGenerator, create_financial_analysis_file

class FinancialAnalysisSystem:
    """L·ªõp ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh"""
    
    def __init__(self, output_directory="output"):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng
        
        Args:
            output_directory (str): Th∆∞ m·ª•c l∆∞u c√°c file output
        """
        self.output_directory = output_directory
        self.data_source = FinancialDataSource()
        
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(output_directory):
            os.makedirs(output_directory)
            print(f"‚úì ƒê√£ t·∫°o th∆∞ m·ª•c output: {output_directory}")
        
        # Bi·∫øn l∆∞u ƒë∆∞·ªùng d·∫´n c√°c file ƒë√£ t·∫°o
        self.balance_sheet_file = None
        self.financial_analysis_file = None
        
    def print_header(self):
        """In header cho ch∆∞∆°ng tr√¨nh"""
        print("=" * 80)
        print("H·ªÜ TH·ªêNG PH√ÇN T√çCH T√ÄI CH√çNH - FINANCIAL ANALYSIS SYSTEM")
        print("=" * 80)
        print("Phi√™n b·∫£n: 1.0")
        print("T√°c gi·∫£: Financial Analysis System")
        print(f"Ng√†y ch·∫°y: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("-" * 80)
        print("Ch·ª©c nƒÉng:")
        print("‚Ä¢ T·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n Excel v·ªõi d·ªØ li·ªáu m·∫´u")
        print("‚Ä¢ T·∫°o file ph√¢n t√≠ch t√†i ch√≠nh v·ªõi c√°c ch·ªâ s·ªë v√† bi·ªÉu ƒë·ªì")
        print("‚Ä¢ √Åp d·ª•ng chu·∫©n m·ª±c k·∫ø to√°n Vi·ªát Nam v√† qu·ªëc t·∫ø")
        print("‚Ä¢ Xu·∫•t b√°o c√°o v·ªõi c√¥ng th·ª©c Excel linh ho·∫°t")
        print("=" * 80)
    
    def validate_system(self):
        """Ki·ªÉm tra t√≠nh s·∫µn s√†ng c·ªßa h·ªá th·ªëng"""
        print("üîç KI·ªÇM TRA H·ªÜ TH·ªêNG...")
        
        # Ki·ªÉm tra d·ªØ li·ªáu m·∫´u
        try:
            sample_data = self.data_source.get_balance_sheet_data()
            print("‚úì D·ªØ li·ªáu m·∫´u: OK")
            
            # Hi·ªÉn th·ªã th√¥ng tin c√¥ng ty m·∫´u
            company_info = sample_data['company_info']
            print(f"  - C√¥ng ty: {company_info['name']}")
            print(f"  - K·ª≥ b√°o c√°o: {company_info['period']}")
            print(f"  - ƒê∆°n v·ªã t√≠nh: {company_info['unit']}")
            
        except Exception as e:
            print(f"‚ùå L·ªói d·ªØ li·ªáu m·∫´u: {str(e)}")
            return False
        
        # Ki·ªÉm tra kh·∫£ nƒÉng t·∫°o file
        try:
            test_path = os.path.join(self.output_directory, "test.txt")
            with open(test_path, 'w') as f:
                f.write("test")
            os.remove(test_path)
            print("‚úì Quy·ªÅn ghi file: OK")
        except Exception as e:
            print(f"‚ùå L·ªói quy·ªÅn ghi file: {str(e)}")
            return False
        
        # Ki·ªÉm tra th∆∞ vi·ªán
        try:
            import openpyxl
            print("‚úì Th∆∞ vi·ªán openpyxl: OK")
        except ImportError:
            print("‚ùå Ch∆∞a c√†i ƒë·∫∑t th∆∞ vi·ªán openpyxl")
            print("   Ch·∫°y: pip install openpyxl")
            return False
        
        print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng!\n")
        return True
    
    def create_balance_sheet(self, filename=None):
        """
        T·∫°o file b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
        
        Args:
            filename (str): T√™n file t√πy ch·ªçn
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file ƒë√£ t·∫°o
        """
        print("üìä ƒêANG T·∫†O B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN...")
        
        try:
            generator = BalanceSheetGenerator(self.output_directory)
            
            if filename is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"bang_can_doi_ke_toan_{timestamp}.xlsx"
            
            filepath = generator.create_balance_sheet(filename)
            self.balance_sheet_file = filepath
            
            print(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng: {os.path.basename(filepath)}")
            print(f"   ƒê∆∞·ªùng d·∫´n: {filepath}")
            
            # Hi·ªÉn th·ªã th√¥ng tin file
            file_size = os.path.getsize(filepath)
            print(f"   K√≠ch th∆∞·ªõc: {file_size:,} bytes")
            
            return filepath
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n: {str(e)}")
            print("Chi ti·∫øt l·ªói:")
            traceback.print_exc()
            return None
    
    def create_financial_analysis(self, filename=None):
        """
        T·∫°o file ph√¢n t√≠ch t√†i ch√≠nh
        
        Args:
            filename (str): T√™n file t√πy ch·ªçn
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file ƒë√£ t·∫°o
        """
        print("\nüìà ƒêANG T·∫†O FILE PH√ÇN T√çCH T√ÄI CH√çNH...")
        
        try:
            generator = FinancialAnalysisGenerator(
                self.output_directory, 
                self.balance_sheet_file
            )
            
            if filename is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"phan_tich_tai_chinh_{timestamp}.xlsx"
            
            filepath = generator.create_financial_analysis(filename)
            self.financial_analysis_file = filepath
            
            print(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng: {os.path.basename(filepath)}")
            print(f"   ƒê∆∞·ªùng d·∫´n: {filepath}")
            
            # Hi·ªÉn th·ªã th√¥ng tin file
            file_size = os.path.getsize(filepath)
            print(f"   K√≠ch th∆∞·ªõc: {file_size:,} bytes")
            
            return filepath
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o file ph√¢n t√≠ch t√†i ch√≠nh: {str(e)}")
            print("Chi ti·∫øt l·ªói:")
            traceback.print_exc()
            return None
    
    def print_summary_report(self):
        """In b√°o c√°o t·ªïng k·∫øt"""
        print("\n" + "=" * 80)
        print("üìã B√ÅO C√ÅO T·ªîNG K·∫æT")
        print("=" * 80)
        
        # Th√¥ng tin file ƒë√£ t·∫°o
        print("üìÅ C√ÅC FILE ƒê√É T·∫†O:")
        if self.balance_sheet_file:
            print(f"   ‚Ä¢ B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n: {os.path.basename(self.balance_sheet_file)}")
            print(f"     ƒê∆∞·ªùng d·∫´n: {self.balance_sheet_file}")
        
        if self.financial_analysis_file:
            print(f"   ‚Ä¢ Ph√¢n t√≠ch t√†i ch√≠nh: {os.path.basename(self.financial_analysis_file)}")
            print(f"     ƒê∆∞·ªùng d·∫´n: {self.financial_analysis_file}")
        
        # Th·ªëng k√™ d·ªØ li·ªáu
        print("\nüìä TH·ªêNG K√ä D·ªÆ LI·ªÜU:")
        data = self.data_source.get_balance_sheet_data()
        
        # T√≠nh to√°n t·ªïng quan
        total_assets = sum(sum(item['value'] for item in section['items'].values()) 
                          for section in data['assets'].values())
        total_liabilities = sum(item['value'] for item in 
                               data['liabilities_equity']['C_NO_PHAI_TRA']['items'].values())
        total_equity = sum(item['value'] for item in 
                          data['liabilities_equity']['D_VON_CHU_SO_HUU']['items'].values())
        
        print(f"   ‚Ä¢ T·ªïng t√†i s·∫£n: {total_assets:,} tri·ªáu VND")
        print(f"   ‚Ä¢ T·ªïng n·ª£ ph·∫£i tr·∫£: {total_liabilities:,} tri·ªáu VND")
        print(f"   ‚Ä¢ T·ªïng v·ªën ch·ªß s·ªü h·ªØu: {total_equity:,} tri·ªáu VND")
        print(f"   ‚Ä¢ Ki·ªÉm tra c√¢n ƒë·ªëi: {total_assets == (total_liabilities + total_equity)}")
        
        # Th√¥ng tin k·ªπ thu·∫≠t
        print("\nüîß TH√îNG TIN K·ª∏ THU·∫¨T:")
        print("   ‚Ä¢ Chu·∫©n m·ª±c: Th√¥ng t∆∞ 200/2014/TT-BTC")
        print("   ‚Ä¢ ƒê·ªãnh d·∫°ng: Excel (.xlsx)")
        print("   ‚Ä¢ C√¥ng th·ª©c: T·ª± ƒë·ªông t√≠nh to√°n")
        print("   ‚Ä¢ Bi·ªÉu ƒë·ªì: C√≥ h·ªó tr·ª£ tr·ª±c quan h√≥a")
        
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        print("\nüìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:")
        print("   1. M·ªü file Excel ƒë√£ t·∫°o")
        print("   2. File b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n ch·ª©a d·ªØ li·ªáu c∆° b·∫£n")
        print("   3. File ph√¢n t√≠ch t√†i ch√≠nh ch·ª©a:")
        print("      - C√°c sheet ph√¢n t√≠ch theo t·ª´ng nh√≥m ch·ªâ s·ªë")
        print("      - Bi·ªÉu ƒë·ªì tr·ª±c quan")
        print("      - ƒê√°nh gi√° v√† khuy·∫øn ngh·ªã")
        print("   4. C√≥ th·ªÉ ch·ªânh s·ª≠a d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t t·ª± ƒë·ªông")
        
        # L∆∞u √Ω quan tr·ªçng
        print("\n‚ö†Ô∏è  L∆ØU √ù QUAN TR·ªåNG:")
        print("   ‚Ä¢ D·ªØ li·ªáu mang t√≠nh ch·∫•t minh h·ªça")
        print("   ‚Ä¢ C·∫ßn x√°c minh v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø khi s·ª≠ d·ª•ng")
        print("   ‚Ä¢ Tu√¢n th·ªß quy ƒë·ªãnh ph√°p lu·∫≠t v·ªÅ k·∫ø to√°n")
        print("   ‚Ä¢ Backup file tr∆∞·ªõc khi ch·ªânh s·ª≠a")
        
        print("=" * 80)
    
    def run_complete_analysis(self, balance_sheet_filename=None, analysis_filename=None):
        """
        Ch·∫°y to√†n b·ªô quy tr√¨nh ph√¢n t√≠ch t√†i ch√≠nh
        
        Args:
            balance_sheet_filename (str): T√™n file b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
            analysis_filename (str): T√™n file ph√¢n t√≠ch t√†i ch√≠nh
            
        Returns:
            dict: Th√¥ng tin v·ªÅ c√°c file ƒë√£ t·∫°o
        """
        
        # In header
        self.print_header()
        
        # Ki·ªÉm tra h·ªá th·ªëng
        if not self.validate_system():
            print("‚ùå H·ªá th·ªëng ch∆∞a s·∫µn s√†ng. Vui l√≤ng kh·∫Øc ph·ª•c c√°c l·ªói tr√™n.")
            return None
        
        # T·∫°o file b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
        balance_sheet_path = self.create_balance_sheet(balance_sheet_filename)
        if not balance_sheet_path:
            print("‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c do l·ªói t·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
            return None
        
        # T·∫°o file ph√¢n t√≠ch t√†i ch√≠nh
        analysis_path = self.create_financial_analysis(analysis_filename)
        if not analysis_path:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o file ph√¢n t√≠ch t√†i ch√≠nh")
            return None
        
        # In b√°o c√°o t·ªïng k·∫øt
        self.print_summary_report()
        
        return {
            'balance_sheet_file': balance_sheet_path,
            'financial_analysis_file': analysis_path,
            'output_directory': self.output_directory,
            'status': 'success'
        }
    
    def get_data_sources_info(self):
        """L·∫•y th√¥ng tin v·ªÅ ngu·ªìn d·ªØ li·ªáu"""
        return self.data_source.get_data_sources_info()

def main():
    """H√†m main ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh"""
    
    # T·∫°o h·ªá th·ªëng
    system = FinancialAnalysisSystem()
    
    # Ch·∫°y ph√¢n t√≠ch ho√†n ch·ªânh
    result = system.run_complete_analysis()
    
    if result and result['status'] == 'success':
        print("\nüéâ HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("B·∫°n c√≥ th·ªÉ t√¨m th·∫•y c√°c file Excel trong th∆∞ m·ª•c 'output'")
        
        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën m·ªü file kh√¥ng (ch·ªâ ƒë·ªÉ tham kh·∫£o)
        print("\nüí° G·ª¢I √ù:")
        print("- C√≥ th·ªÉ m·ªü c√°c file Excel ƒë·ªÉ xem k·∫øt qu·∫£")
        print("- S·ª≠ d·ª•ng c√°c file l√†m template cho d·ª± √°n th·ª±c t·∫ø")
        print("- T√πy ch·ªânh d·ªØ li·ªáu v√† c√¥ng th·ª©c theo nhu c·∫ßu")
        
    else:
        print("\n‚ùå QUY TR√åNH TH·∫§T B·∫†I!")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i c√°c l·ªói v√† th·ª≠ l·∫°i.")
    
    return result

def create_sample_files(output_dir="output"):
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o nhanh c√°c file m·∫´u
    
    Args:
        output_dir (str): Th∆∞ m·ª•c output
        
    Returns:
        dict: Th√¥ng tin file ƒë√£ t·∫°o
    """
    system = FinancialAnalysisSystem(output_dir)
    return system.run_complete_analysis()

def print_usage():
    """In h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    print("""
H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG H·ªÜ TH·ªêNG PH√ÇN T√çCH T√ÄI CH√çNH

1. Ch·∫°y tr·ª±c ti·∫øp:
   python main.py

2. Import v√† s·ª≠ d·ª•ng:
   from main import FinancialAnalysisSystem
   system = FinancialAnalysisSystem()
   result = system.run_complete_analysis()

3. T·∫°o file nhanh:
   from main import create_sample_files
   result = create_sample_files("my_output")

C√ÅC FILE S·∫º ƒê∆Ø·ª¢C T·∫†O:
- bang_can_doi_ke_toan_[timestamp].xlsx
- phan_tich_tai_chinh_[timestamp].xlsx

Y√äU C·∫¶U H·ªÜ TH·ªêNG:
- Python 3.7+
- openpyxl
- pandas (t√πy ch·ªçn)

C√ÄI ƒê·∫∂T TH·ª¶ C√îNG:
pip install openpyxl pandas

LI√äN H·ªÜ H·ªñ TR·ª¢:
N·∫øu g·∫∑p l·ªói, vui l√≤ng ki·ªÉm tra:
1. Quy·ªÅn ghi file trong th∆∞ m·ª•c
2. Phi√™n b·∫£n Python v√† th∆∞ vi·ªán
3. Dung l∆∞·ª£ng ·ªï ƒëƒ©a
""")

if __name__ == "__main__":
    # Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help', 'help']:
            print_usage()
            sys.exit(0)
        elif sys.argv[1] in ['-v', '--version', 'version']:
            print("Financial Analysis System v1.0")
            print("T·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n v√† ph√¢n t√≠ch t√†i ch√≠nh Excel")
            sys.exit(0)
    
    # Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Ch∆∞∆°ng tr√¨nh b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}")
        print("Chi ti·∫øt l·ªói:")
        traceback.print_exc()
        print("\nVui l√≤ng b√°o c√°o l·ªói n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.")