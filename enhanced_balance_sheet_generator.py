"""
Enhanced Balance Sheet Generator v·ªõi Named Ranges cho H·ªá th·ªëng B√°o c√°o T√†i ch√≠nh ƒê·ªông
============================================================================

T·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n v·ªõi h·ªá th·ªëng named ranges ho√†n ch·ªânh theo chu·∫©n k·∫ø to√°n Vi·ªát Nam
H·ªó tr·ª£ c√¥ng th·ª©c Excel ƒë·ªông cho c√°c b√°o c√°o t√†i ch√≠nh

T√°c gi·∫£: H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông
Chu·∫©n: VAS/Circular 200/2014/TT-BTC
"""

import openpyxl
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from openpyxl.workbook.defined_name import DefinedName
import datetime
import json
import os

class EnhancedBalanceSheetGenerator:
    def __init__(self):
        self.wb = None
        self.ws_balance = None
        self.ws_mapping = None
        self.ws_income = None
        self.named_ranges = {}
        self.accounting_codes = {}
        
        # Thi·∫øt l·∫≠p style
        self.setup_styles()
        
        # D·ªØ li·ªáu m·∫´u theo chu·∫©n k·∫ø to√°n Vi·ªát Nam
        self.setup_sample_data()
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p c√°c style Excel chuy√™n nghi·ªáp"""
        self.font_header = Font(name='Times New Roman', size=14, bold=True)
        self.font_title = Font(name='Times New Roman', size=12, bold=True)
        self.font_normal = Font(name='Times New Roman', size=11)
        self.font_bold = Font(name='Times New Roman', size=11, bold=True)
        
        # M√†u s·∫Øc
        self.fill_header = PatternFill(start_color='366092', end_color='366092', fill_type='solid')
        self.fill_section = PatternFill(start_color='D9E2F3', end_color='D9E2F3', fill_type='solid')
        self.fill_subsection = PatternFill(start_color='F2F2F2', end_color='F2F2F2', fill_type='solid')
        
        # Border
        self.border_thick = Border(
            left=Side(style='thick'), right=Side(style='thick'),
            top=Side(style='thick'), bottom=Side(style='thick')
        )
        self.border_thin = Border(
            left=Side(style='thin'), right=Side(style='thin'),
            top=Side(style='thin'), bottom=Side(style='thin')
        )
        
    def setup_sample_data(self):
        """Thi·∫øt l·∫≠p d·ªØ li·ªáu m·∫´u theo chu·∫©n k·∫ø to√°n Vi·ªát Nam"""
        # D·ªØ li·ªáu ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ c√¢n ƒë·ªëi ch√≠nh x√°c
        self.balance_sheet_data = {
            # T√ÄI S·∫¢N
            'assets': {
                'current_assets': {
                    'cash_and_equivalents': {'code': '111', 'value': 15000000000, 'name': 'Ti·ªÅn v√† t∆∞∆°ng ƒë∆∞∆°ng ti·ªÅn'},
                    'short_term_investments': {'code': '121', 'value': 8000000000, 'name': 'ƒê·∫ßu t∆∞ t√†i ch√≠nh ng·∫Øn h·∫°n'},
                    'accounts_receivable': {'code': '131', 'value': 12000000000, 'name': 'Ph·∫£i thu kh√°ch h√†ng'},
                    'inventory': {'code': '141', 'value': 18000000000, 'name': 'H√†ng t·ªìn kho'},
                    'prepaid_expenses': {'code': '151', 'value': 2000000000, 'name': 'Chi ph√≠ tr·∫£ tr∆∞·ªõc ng·∫Øn h·∫°n'},
                    'other_current_assets': {'code': '161', 'value': 3000000000, 'name': 'T√†i s·∫£n ng·∫Øn h·∫°n kh√°c'}
                    # T·ªïng: 58,000,000,000
                },
                'non_current_assets': {
                    'long_term_receivables': {'code': '211', 'value': 5000000000, 'name': 'Ph·∫£i thu d√†i h·∫°n'},
                    'fixed_assets': {'code': '221', 'value': 45000000000, 'name': 'T√†i s·∫£n c·ªë ƒë·ªãnh h·ªØu h√¨nh'},
                    'intangible_assets': {'code': '231', 'value': 8000000000, 'name': 'T√†i s·∫£n c·ªë ƒë·ªãnh v√¥ h√¨nh'},
                    'long_term_investments': {'code': '241', 'value': 12000000000, 'name': 'ƒê·∫ßu t∆∞ t√†i ch√≠nh d√†i h·∫°n'},
                    'other_non_current_assets': {'code': '251', 'value': 2000000000, 'name': 'T√†i s·∫£n d√†i h·∫°n kh√°c'}
                    # T·ªïng: 72,000,000,000
                }
                # T·ªïng t√†i s·∫£n: 130,000,000,000
            },
            # N·ª¢ PH·∫¢I TR·∫¢
            'liabilities': {
                'current_liabilities': {
                    'accounts_payable': {'code': '311', 'value': 10000000000, 'name': 'Ph·∫£i tr·∫£ ng∆∞·ªùi b√°n'},
                    'short_term_loans': {'code': '321', 'value': 15000000000, 'name': 'Vay v√† n·ª£ ng·∫Øn h·∫°n'},
                    'accrued_expenses': {'code': '331', 'value': 5000000000, 'name': 'Chi ph√≠ ph·∫£i tr·∫£'},
                    'taxes_payable': {'code': '341', 'value': 3000000000, 'name': 'Thu·∫ø v√† ph√≠ ph·∫£i n·ªôp'},
                    'other_current_liabilities': {'code': '351', 'value': 2000000000, 'name': 'N·ª£ ng·∫Øn h·∫°n kh√°c'}
                    # T·ªïng: 35,000,000,000
                },
                'non_current_liabilities': {
                    'long_term_loans': {'code': '411', 'value': 25000000000, 'name': 'Vay v√† n·ª£ d√†i h·∫°n'},
                    'provisions': {'code': '421', 'value': 3000000000, 'name': 'D·ª± ph√≤ng d√†i h·∫°n'},
                    'other_non_current_liabilities': {'code': '431', 'value': 2000000000, 'name': 'N·ª£ d√†i h·∫°n kh√°c'}
                    # T·ªïng: 30,000,000,000
                }
                # T·ªïng n·ª£: 65,000,000,000
            },
            # V·ªêN CH·ª¶ S·ªû H·ªÆU
            'equity': {
                'share_capital': {'code': '511', 'value': 50000000000, 'name': 'V·ªën ƒëi·ªÅu l·ªá'},
                'capital_surplus': {'code': '521', 'value': 5000000000, 'name': 'Th·∫∑ng d∆∞ v·ªën c·ªï ph·∫ßn'},
                'retained_earnings': {'code': '531', 'value': 10000000000, 'name': 'L·ª£i nhu·∫≠n sau thu·∫ø ch∆∞a ph√¢n ph·ªëi'},
                'other_equity': {'code': '541', 'value': 0, 'name': 'Ngu·ªìn v·ªën ch·ªß s·ªü h·ªØu kh√°c'}
                # T·ªïng v·ªën: 65,000,000,000
            }
            # T·ªïng ngu·ªìn v·ªën: 65,000,000,000 + 65,000,000,000 = 130,000,000,000 ‚úì
        }
        
        # D·ªØ li·ªáu b√°o c√°o k·∫øt qu·∫£ kinh doanh
        self.income_statement_data = {
            'revenue': {'code': '511', 'value': 80000000000, 'name': 'Doanh thu thu·∫ßn'},
            'cost_of_goods_sold': {'code': '621', 'value': 50000000000, 'name': 'Gi√° v·ªën h√†ng b√°n'},
            'gross_profit': {'code': '631', 'value': 30000000000, 'name': 'L·ª£i nhu·∫≠n g·ªôp'},
            'operating_expenses': {'code': '641', 'value': 20000000000, 'name': 'Chi ph√≠ b√°n h√†ng v√† qu·∫£n l√Ω'},
            'operating_income': {'code': '651', 'value': 10000000000, 'name': 'L·ª£i nhu·∫≠n t·ª´ ho·∫°t ƒë·ªông kinh doanh'},
            'financial_income': {'code': '661', 'value': 2000000000, 'name': 'Thu nh·∫≠p t√†i ch√≠nh'},
            'financial_expenses': {'code': '671', 'value': 1500000000, 'name': 'Chi ph√≠ t√†i ch√≠nh'},
            'other_income': {'code': '681', 'value': 500000000, 'name': 'Thu nh·∫≠p kh√°c'},
            'other_expenses': {'code': '691', 'value': 200000000, 'name': 'Chi ph√≠ kh√°c'},
            'pre_tax_income': {'code': '701', 'value': 10800000000, 'name': 'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø'},
            'tax_expense': {'code': '711', 'value': 2160000000, 'name': 'Chi ph√≠ thu·∫ø TNDN'},
            'net_income': {'code': '721', 'value': 8640000000, 'name': 'L·ª£i nhu·∫≠n sau thu·∫ø'}
        }
        
    def create_balance_sheet(self):
        """T·∫°o sheet b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n v·ªõi named ranges"""
        print("üèóÔ∏è  ƒêang t·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n...")
        
        self.wb = openpyxl.Workbook()
        self.ws_balance = self.wb.active
        self.ws_balance.title = "B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n"
        
        # Header
        self.create_balance_sheet_header()
        
        # T√†i s·∫£n
        row = 6
        row = self.create_assets_section(row)
        
        # N·ª£ ph·∫£i tr·∫£
        row += 2
        row = self.create_liabilities_section(row)
        
        # V·ªën ch·ªß s·ªü h·ªØu
        row += 2
        row = self.create_equity_section(row)
        
        # Ki·ªÉm tra c√¢n ƒë·ªëi
        self.create_balance_check(row + 2)
        
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_balance_sheet_columns()
        
        print("‚úÖ Ho√†n th√†nh b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n v·ªõi named ranges")
        
    def create_balance_sheet_header(self):
        """T·∫°o header cho b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n"""
        # Ti√™u ƒë·ªÅ ch√≠nh
        self.ws_balance.merge_cells('A1:D1')
        cell = self.ws_balance['A1']
        cell.value = "B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # Th√¥ng tin c√¥ng ty
        self.ws_balance.merge_cells('A2:D2')
        cell = self.ws_balance['A2']
        cell.value = f"T·∫°i ng√†y: {datetime.date.today().strftime('%d/%m/%Y')}"
        cell.font = self.font_title
        cell.alignment = Alignment(horizontal='center')
        
        # Header c·ªôt
        headers = ['Ch·ªâ ti√™u', 'M√£ s·ªë', 'Thuy·∫øt minh', 'S·ªë cu·ªëi k·ª≥ (VND)']
        for col, header in enumerate(headers, 1):
            cell = self.ws_balance.cell(row=4, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
            cell.alignment = Alignment(horizontal='center', vertical='center')
            
    def create_assets_section(self, start_row):
        """T·∫°o ph·∫ßn t√†i s·∫£n"""
        row = start_row
        
        # Header T√†i s·∫£n
        self.ws_balance.merge_cells(f'A{row}:D{row}')
        cell = self.ws_balance[f'A{row}']
        cell.value = "T√ÄI S·∫¢N"
        cell.font = self.font_bold
        cell.fill = self.fill_section
        cell.border = self.border_thin
        row += 1
        
        # T√†i s·∫£n ng·∫Øn h·∫°n
        self.ws_balance.merge_cells(f'A{row}:D{row}')
        cell = self.ws_balance[f'A{row}']
        cell.value = "A. T√ÄI S·∫¢N NG·∫ÆN H·∫†N"
        cell.font = self.font_bold
        cell.fill = self.fill_subsection
        row += 1
        
        current_assets_start = row
        current_assets_total = 0
        
        for key, item in self.balance_sheet_data['assets']['current_assets'].items():
            self.ws_balance[f'A{row}'] = f"   {item['name']}"
            self.ws_balance[f'B{row}'] = item['code']
            self.ws_balance[f'C{row}'] = ""
            self.ws_balance[f'D{row}'] = item['value']
            
            # T·∫°o named range cho t·ª´ng item
            range_name = self.camel_case(key)
            self.create_named_range(range_name, f"'B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n'!D{row}")
            
            current_assets_total += item['value']
            row += 1
            
        # T·ªïng t√†i s·∫£n ng·∫Øn h·∫°n
        self.ws_balance[f'A{row}'] = "T·ªïng t√†i s·∫£n ng·∫Øn h·∫°n"
        self.ws_balance[f'B{row}'] = "100"
        self.ws_balance[f'D{row}'] = current_assets_total
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold)
        self.create_named_range('CurrentAssets', f"'B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n'!D{row}")
        row += 2
        
        # T√†i s·∫£n d√†i h·∫°n
        self.ws_balance.merge_cells(f'A{row}:D{row}')
        cell = self.ws_balance[f'A{row}']
        cell.value = "B. T√ÄI S·∫¢N D√ÄI H·∫†N"
        cell.font = self.font_bold
        cell.fill = self.fill_subsection
        row += 1
        
        non_current_assets_total = 0
        
        for key, item in self.balance_sheet_data['assets']['non_current_assets'].items():
            self.ws_balance[f'A{row}'] = f"   {item['name']}"
            self.ws_balance[f'B{row}'] = item['code']
            self.ws_balance[f'C{row}'] = ""
            self.ws_balance[f'D{row}'] = item['value']
            
            # T·∫°o named range
            range_name = self.camel_case(key)
            self.create_named_range(range_name, f'D{row}')
            
            non_current_assets_total += item['value']
            row += 1
            
        # T·ªïng t√†i s·∫£n d√†i h·∫°n
        self.ws_balance[f'A{row}'] = "T·ªïng t√†i s·∫£n d√†i h·∫°n"
        self.ws_balance[f'B{row}'] = "200"
        self.ws_balance[f'D{row}'] = non_current_assets_total
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold)
        self.create_named_range('NonCurrentAssets', f'D{row}')
        row += 1
        
        # T·ªïng t√†i s·∫£n
        total_assets = current_assets_total + non_current_assets_total
        self.ws_balance[f'A{row}'] = "T·ªîNG C·ªòNG T√ÄI S·∫¢N"
        self.ws_balance[f'B{row}'] = "270"
        self.ws_balance[f'D{row}'] = total_assets
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold, self.fill_section)
        self.create_named_range('TotalAssets', f"'B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n'!D{row}")
        
        return row + 1
        
    def create_liabilities_section(self, start_row):
        """T·∫°o ph·∫ßn n·ª£ ph·∫£i tr·∫£"""
        row = start_row
        
        # Header N·ª£ ph·∫£i tr·∫£
        self.ws_balance.merge_cells(f'A{row}:D{row}')
        cell = self.ws_balance[f'A{row}']
        cell.value = "NGU·ªíN V·ªêN"
        cell.font = self.font_bold
        cell.fill = self.fill_section
        cell.border = self.border_thin
        row += 1
        
        # N·ª£ ng·∫Øn h·∫°n
        self.ws_balance.merge_cells(f'A{row}:D{row}')
        cell = self.ws_balance[f'A{row}']
        cell.value = "C. N·ª¢ PH·∫¢I TR·∫¢"
        cell.font = self.font_bold
        cell.fill = self.fill_subsection
        row += 1
        
        self.ws_balance[f'A{row}'] = "I. N·ª£ ng·∫Øn h·∫°n"
        self.ws_balance[f'B{row}'] = "300"
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold)
        row += 1
        
        current_liabilities_total = 0
        
        for key, item in self.balance_sheet_data['liabilities']['current_liabilities'].items():
            self.ws_balance[f'A{row}'] = f"   {item['name']}"
            self.ws_balance[f'B{row}'] = item['code']
            self.ws_balance[f'C{row}'] = ""
            self.ws_balance[f'D{row}'] = item['value']
            
            # T·∫°o named range
            range_name = self.camel_case(key)
            self.create_named_range(range_name, f'D{row}')
            
            current_liabilities_total += item['value']
            row += 1
            
        # T·ªïng n·ª£ ng·∫Øn h·∫°n
        self.ws_balance[f'A{row}'] = "T·ªïng n·ª£ ng·∫Øn h·∫°n"
        self.ws_balance[f'B{row}'] = "300"
        self.ws_balance[f'D{row}'] = current_liabilities_total
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold)
        self.create_named_range('CurrentLiabilities', f'D{row}')
        row += 2
        
        # N·ª£ d√†i h·∫°n
        self.ws_balance[f'A{row}'] = "II. N·ª£ d√†i h·∫°n"
        self.ws_balance[f'B{row}'] = "400"
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold)
        row += 1
        
        non_current_liabilities_total = 0
        
        for key, item in self.balance_sheet_data['liabilities']['non_current_liabilities'].items():
            self.ws_balance[f'A{row}'] = f"   {item['name']}"
            self.ws_balance[f'B{row}'] = item['code']
            self.ws_balance[f'C{row}'] = ""
            self.ws_balance[f'D{row}'] = item['value']
            
            # T·∫°o named range
            range_name = self.camel_case(key)
            self.create_named_range(range_name, f'D{row}')
            
            non_current_liabilities_total += item['value']
            row += 1
            
        # T·ªïng n·ª£ d√†i h·∫°n
        self.ws_balance[f'A{row}'] = "T·ªïng n·ª£ d√†i h·∫°n"
        self.ws_balance[f'B{row}'] = "400"
        self.ws_balance[f'D{row}'] = non_current_liabilities_total
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold)
        self.create_named_range('NonCurrentLiabilities', f'D{row}')
        row += 1
        
        # T·ªïng n·ª£ ph·∫£i tr·∫£
        total_liabilities = current_liabilities_total + non_current_liabilities_total
        self.ws_balance[f'A{row}'] = "T·ªîNG C·ªòNG N·ª¢ PH·∫¢I TR·∫¢"
        self.ws_balance[f'B{row}'] = "430"
        self.ws_balance[f'D{row}'] = total_liabilities
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold, self.fill_section)
        self.create_named_range('TotalLiabilities', f'D{row}')
        
        return row
        
    def create_equity_section(self, start_row):
        """T·∫°o ph·∫ßn v·ªën ch·ªß s·ªü h·ªØu"""
        row = start_row
        
        # Header v·ªën ch·ªß s·ªü h·ªØu
        self.ws_balance.merge_cells(f'A{row}:D{row}')
        cell = self.ws_balance[f'A{row}']
        cell.value = "D. V·ªêN CH·ª¶ S·ªû H·ªÆU"
        cell.font = self.font_bold
        cell.fill = self.fill_subsection
        row += 1
        
        total_equity = 0
        
        for key, item in self.balance_sheet_data['equity'].items():
            self.ws_balance[f'A{row}'] = f"   {item['name']}"
            self.ws_balance[f'B{row}'] = item['code']
            self.ws_balance[f'C{row}'] = ""
            self.ws_balance[f'D{row}'] = item['value']
            
            # T·∫°o named range
            range_name = self.camel_case(key)
            self.create_named_range(range_name, f'D{row}')
            
            total_equity += item['value']
            row += 1
            
        # T·ªïng v·ªën ch·ªß s·ªü h·ªØu
        self.ws_balance[f'A{row}'] = "T·ªîNG C·ªòNG V·ªêN CH·ª¶ S·ªû H·ªÆU"
        self.ws_balance[f'B{row}'] = "440"
        self.ws_balance[f'D{row}'] = total_equity
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold, self.fill_section)
        self.create_named_range('TotalEquity', f'D{row}')
        row += 1
        
        # T·ªïng ngu·ªìn v·ªën
        total_liabilities = sum(item['value'] for section in self.balance_sheet_data['liabilities'].values() 
                               for item in section.values())
        
        self.ws_balance[f'A{row}'] = "T·ªîNG C·ªòNG NGU·ªíN V·ªêN"
        self.ws_balance[f'B{row}'] = "440"
        self.ws_balance[f'D{row}'] = total_liabilities + total_equity
        self.apply_cell_style(self.ws_balance[f'A{row}:D{row}'], self.font_bold, self.fill_header)
        self.create_named_range('TotalLiabilitiesAndEquity', f'D{row}')
        
        return row
        
    def create_balance_check(self, row):
        """T·∫°o ph·∫ßn ki·ªÉm tra c√¢n ƒë·ªëi"""
        self.ws_balance[f'A{row}'] = "KI·ªÇM TRA C√ÇN ƒê·ªêI:"
        self.ws_balance[f'A{row+1}'] = "T·ªïng T√†i s·∫£n ="
        self.ws_balance[f'B{row+1}'] = "=TotalAssets"
        self.ws_balance[f'A{row+2}'] = "T·ªïng Ngu·ªìn v·ªën ="
        self.ws_balance[f'B{row+2}'] = "=TotalLiabilitiesAndEquity"
        self.ws_balance[f'A{row+3}'] = "Ch√™nh l·ªách ="
        self.ws_balance[f'B{row+3}'] = "=TotalAssets-TotalLiabilitiesAndEquity"
        
        # ƒê·ªãnh d·∫°ng
        for r in range(row, row+4):
            self.apply_cell_style(self.ws_balance[f'A{r}:B{r}'], self.font_bold)
            
    def create_income_statement_sheet(self):
        """T·∫°o sheet b√°o c√°o k·∫øt qu·∫£ kinh doanh"""
        print("üìä ƒêang t·∫°o b√°o c√°o k·∫øt qu·∫£ kinh doanh...")
        
        self.ws_income = self.wb.create_sheet("B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh")
        
        # Header
        self.ws_income.merge_cells('A1:D1')
        cell = self.ws_income['A1']
        cell.value = "B√ÅO C√ÅO K·∫æT QU·∫¢ KINH DOANH"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # Th√¥ng tin
        self.ws_income.merge_cells('A2:D2')
        cell = self.ws_income['A2']
        cell.value = f"NƒÉm k·∫øt th√∫c ng√†y: {datetime.date.today().strftime('%d/%m/%Y')}"
        cell.font = self.font_title
        cell.alignment = Alignment(horizontal='center')
        
        # Header c·ªôt
        headers = ['Ch·ªâ ti√™u', 'M√£ s·ªë', 'Thuy·∫øt minh', 'NƒÉm nay (VND)']
        for col, header in enumerate(headers, 1):
            cell = self.ws_income.cell(row=4, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
            cell.alignment = Alignment(horizontal='center', vertical='center')
            
        # D·ªØ li·ªáu
        row = 5
        for key, item in self.income_statement_data.items():
            self.ws_income[f'A{row}'] = item['name']
            self.ws_income[f'B{row}'] = item['code']
            self.ws_income[f'C{row}'] = ""
            self.ws_income[f'D{row}'] = item['value']
            
            # T·∫°o named range
            range_name = self.camel_case(key)
            self.create_named_range(range_name, f"'B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh'!D{row}")
            
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_income_statement_columns()
        
        print("‚úÖ Ho√†n th√†nh b√°o c√°o k·∫øt qu·∫£ kinh doanh v·ªõi named ranges")
        
    def create_mapping_sheet(self):
        """T·∫°o sheet mapping v·ªõi c√°c c√¥ng th·ª©c v√≠ d·ª•"""
        print("üó∫Ô∏è  ƒêang t·∫°o sheet mapping v√† v√≠ d·ª• c√¥ng th·ª©c...")
        
        self.ws_mapping = self.wb.create_sheet("Mapping v√† C√¥ng th·ª©c")
        
        # Header
        self.ws_mapping.merge_cells('A1:E1')
        cell = self.ws_mapping['A1']
        cell.value = "H·ªÜ TH·ªêNG MAPPING V√Ä C√îNG TH·ª®C ƒê·ªòNG"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # B·∫£ng named ranges
        row = 3
        self.ws_mapping[f'A{row}'] = "DANH S√ÅCH NAMED RANGES"
        self.apply_cell_style(self.ws_mapping[f'A{row}:E{row}'], self.font_bold, self.fill_section)
        row += 1
        
        headers = ['Named Range', 'M√¥ t·∫£', 'Cell/Range', 'Gi√° tr·ªã', 'C√¥ng th·ª©c v√≠ d·ª•']
        for col, header in enumerate(headers, 1):
            cell = self.ws_mapping.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_subsection
            
        row += 1
        
        # Danh s√°ch named ranges v·ªõi v√≠ d·ª• c√¥ng th·ª©c
        mapping_examples = [
            ('TotalAssets', 'T·ªïng t√†i s·∫£n', 'Sheet1!D26', '=TotalAssets', 'ROA = NetIncome/TotalAssets'),
            ('CurrentAssets', 'T√†i s·∫£n ng·∫Øn h·∫°n', 'Sheet1!D12', '=CurrentAssets', 'Current Ratio = CurrentAssets/CurrentLiabilities'),
            ('CurrentLiabilities', 'N·ª£ ng·∫Øn h·∫°n', 'Sheet1!D35', '=CurrentLiabilities', 'Quick Ratio = (CurrentAssets-Inventory)/CurrentLiabilities'),
            ('TotalEquity', 'V·ªën ch·ªß s·ªü h·ªØu', 'Sheet1!D45', '=TotalEquity', 'ROE = NetIncome/TotalEquity'),
            ('Revenue', 'Doanh thu', 'Sheet2!D5', '=Revenue', 'Asset Turnover = Revenue/TotalAssets'),
            ('NetIncome', 'L·ª£i nhu·∫≠n sau thu·∫ø', 'Sheet2!D17', '=NetIncome', 'Profit Margin = NetIncome/Revenue'),
            ('Inventory', 'H√†ng t·ªìn kho', 'Sheet1!D9', '=Inventory', 'Inventory Turnover = COGS/Inventory'),
            ('TotalLiabilities', 'T·ªïng n·ª£', 'Sheet1!D41', '=TotalLiabilities', 'Debt to Assets = TotalLiabilities/TotalAssets')
        ]
        
        for range_name, description, cell_ref, formula, example in mapping_examples:
            self.ws_mapping[f'A{row}'] = range_name
            self.ws_mapping[f'B{row}'] = description
            self.ws_mapping[f'C{row}'] = cell_ref
            self.ws_mapping[f'D{row}'] = formula
            self.ws_mapping[f'E{row}'] = example
            row += 1
            
        # B·∫£ng c√¥ng th·ª©c ch·ªâ s·ªë t√†i ch√≠nh
        row += 2
        self.ws_mapping[f'A{row}'] = "C√ÅC C√îNG TH·ª®C CH·ªà S·ªê T√ÄI CH√çNH"
        self.apply_cell_style(self.ws_mapping[f'A{row}:E{row}'], self.font_bold, self.fill_section)
        row += 1
        
        headers = ['Ch·ªâ s·ªë', 'C√¥ng th·ª©c Excel', '√ù nghƒ©a', 'Chu·∫©n ƒë√°nh gi√°', 'C√¥ng th·ª©c Python t∆∞∆°ng ƒë∆∞∆°ng']
        for col, header in enumerate(headers, 1):
            cell = self.ws_mapping.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_subsection
            
        row += 1
        
        financial_ratios = [
            ('Current Ratio', '=CurrentAssets/CurrentLiabilities', 'Kh·∫£ nƒÉng thanh to√°n ng·∫Øn h·∫°n', '>2.0: T·ªët', 'current_assets / current_liabilities'),
            ('Quick Ratio', '=(CurrentAssets-Inventory)/CurrentLiabilities', 'Kh·∫£ nƒÉng thanh to√°n t·ª©c th·ªùi', '>1.0: T·ªët', '(current_assets - inventory) / current_liabilities'),
            ('ROA (%)', '=NetIncome/TotalAssets*100', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n', '>5%: T·ªët', 'net_income / total_assets * 100'),
            ('ROE (%)', '=NetIncome/TotalEquity*100', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng v·ªën', '>15%: T·ªët', 'net_income / total_equity * 100'),
            ('Debt to Assets', '=TotalLiabilities/TotalAssets', 'T·ª∑ l·ªá n·ª£ tr√™n t√†i s·∫£n', '<0.6: T·ªët', 'total_liabilities / total_assets'),
            ('Asset Turnover', '=Revenue/TotalAssets', 'Hi·ªáu qu·∫£ quay v√≤ng t√†i s·∫£n', '>1.0: T·ªët', 'revenue / total_assets'),
            ('Inventory Turnover', '=CostOfGoodsSold/Inventory', 'Hi·ªáu qu·∫£ quay v√≤ng h√†ng t·ªìn', '>6: T·ªët', 'cogs / inventory'),
            ('Profit Margin (%)', '=NetIncome/Revenue*100', 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n', '>10%: T·ªët', 'net_income / revenue * 100')
        ]
        
        for ratio_name, formula, meaning, standard, python_equiv in financial_ratios:
            self.ws_mapping[f'A{row}'] = ratio_name
            self.ws_mapping[f'B{row}'] = formula
            self.ws_mapping[f'C{row}'] = meaning
            self.ws_mapping[f'D{row}'] = standard
            self.ws_mapping[f'E{row}'] = python_equiv
            row += 1
            
        # ƒê·ªãnh d·∫°ng
        self.format_mapping_columns()
        
        print("‚úÖ Ho√†n th√†nh sheet mapping v·ªõi c√¥ng th·ª©c v√≠ d·ª•")
        
    def create_named_range(self, name, cell_range):
        """T·∫°o named range trong workbook"""
        try:
            # T·∫°o DefinedName object ƒë√∫ng c√°ch cho openpyxl
            defined_name = DefinedName(name, attr_text=cell_range)
            
            # Th√™m v√†o workbook defined names
            if hasattr(self.wb, 'defined_names'):
                # X√≥a range c≈© n·∫øu t·ªìn t·∫°i
                if name in self.wb.defined_names:
                    del self.wb.defined_names[name]
                    
                # Th√™m range m·ªõi
                self.wb.defined_names[name] = defined_name
                
                # L∆∞u v√†o dict ƒë·ªÉ tracking
                self.named_ranges[name] = cell_range
                print(f"‚úÖ T·∫°o named range: {name} -> {cell_range}")
            else:
                # Fallback cho c√°c phi√™n b·∫£n openpyxl c≈©
                self.named_ranges[name] = cell_range
                print(f"‚ö†Ô∏è  L∆∞u named range (kh√¥ng th√™m v√†o workbook): {name} -> {cell_range}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói t·∫°o named range {name}: {e}")
            # L∆∞u th√¥ng tin ƒë·ªÉ s·ª≠ d·ª•ng sau
            self.named_ranges[name] = cell_range
            
    def camel_case(self, text):
        """Chuy·ªÉn text th√†nh camelCase cho named range"""
        words = text.split('_')
        return words[0].lower() + ''.join(word.capitalize() for word in words[1:])
        
    def apply_cell_style(self, cell_range, font=None, fill=None, border=None):
        """√Åp d·ª•ng style cho range cells"""
        if isinstance(cell_range, str):
            # N·∫øu l√† string th√¨ convert th√†nh range
            start_cell, end_cell = cell_range.split(':')
            cell_range = self.ws_balance[cell_range]
            
        if hasattr(cell_range, '__iter__'):
            # N·∫øu l√† range
            for row in cell_range:
                for cell in row:
                    if font:
                        cell.font = font
                    if fill:
                        cell.fill = fill
                    if border:
                        cell.border = border or self.border_thin
        else:
            # N·∫øu l√† single cell
            if font:
                cell_range.font = font
            if fill:
                cell_range.fill = fill
            if border:
                cell_range.border = border or self.border_thin
                
    def format_balance_sheet_columns(self):
        """ƒê·ªãnh d·∫°ng c·ªôt cho b·∫£ng c√¢n ƒë·ªëi"""
        # ƒê·ªô r·ªông c·ªôt
        self.ws_balance.column_dimensions['A'].width = 40
        self.ws_balance.column_dimensions['B'].width = 10
        self.ws_balance.column_dimensions['C'].width = 15
        self.ws_balance.column_dimensions['D'].width = 20
        
        # ƒê·ªãnh d·∫°ng s·ªë
        for row in self.ws_balance.iter_rows():
            for cell in row:
                if cell.column == 4 and cell.value and isinstance(cell.value, (int, float)):
                    cell.number_format = '#,##0'
                    
    def format_income_statement_columns(self):
        """ƒê·ªãnh d·∫°ng c·ªôt cho b√°o c√°o k·∫øt qu·∫£ kinh doanh"""
        # ƒê·ªô r·ªông c·ªôt
        self.ws_income.column_dimensions['A'].width = 40
        self.ws_income.column_dimensions['B'].width = 10
        self.ws_income.column_dimensions['C'].width = 15
        self.ws_income.column_dimensions['D'].width = 20
        
        # ƒê·ªãnh d·∫°ng s·ªë
        for row in self.ws_income.iter_rows():
            for cell in row:
                if cell.column == 4 and cell.value and isinstance(cell.value, (int, float)):
                    cell.number_format = '#,##0'
                    
    def format_mapping_columns(self):
        """ƒê·ªãnh d·∫°ng c·ªôt cho sheet mapping"""
        # ƒê·ªô r·ªông c·ªôt
        self.ws_mapping.column_dimensions['A'].width = 20
        self.ws_mapping.column_dimensions['B'].width = 30
        self.ws_mapping.column_dimensions['C'].width = 15
        self.ws_mapping.column_dimensions['D'].width = 20
        self.ws_mapping.column_dimensions['E'].width = 40
        
    def save_workbook(self, filename=None):
        """L∆∞u workbook"""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"bang_can_doi_ke_toan_dynamic_{timestamp}.xlsx"
            
        try:
            self.wb.save(filename)
            print(f"‚úÖ ƒê√£ l∆∞u file: {filename}")
            
            # L∆∞u th√¥ng tin named ranges
            self.save_named_ranges_info(filename.replace('.xlsx', '_named_ranges.json'))
            
            return filename
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file: {e}")
            return None
            
    def save_named_ranges_info(self, filename):
        """L∆∞u th√¥ng tin named ranges ra file JSON"""
        try:
            info = {
                'created': datetime.datetime.now().isoformat(),
                'total_ranges': len(self.named_ranges),
                'ranges': self.named_ranges,
                'balance_sheet_data': self.balance_sheet_data,
                'income_statement_data': self.income_statement_data
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(info, f, ensure_ascii=False, indent=2)
                
            print(f"‚úÖ ƒê√£ l∆∞u th√¥ng tin named ranges: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói l∆∞u named ranges info: {e}")
            
    def generate_complete_balance_sheet(self):
        """T·∫°o ho√†n ch·ªânh b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n v·ªõi named ranges"""
        print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o h·ªá th·ªëng b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n ƒë·ªông...")
        
        # T·∫°o c√°c sheet
        self.create_balance_sheet()
        self.create_income_statement_sheet()
        self.create_mapping_sheet()
        
        # L∆∞u file
        filename = self.save_workbook()
        
        if filename:
            print(f"\nüéâ HO√ÄN TH√ÄNH!")
            print(f"üìÅ File: {filename}")
            print(f"üìä Named Ranges: {len(self.named_ranges)}")
            print(f"üìà Sheets: {len(self.wb.sheetnames)}")
            print("\nüìã Danh s√°ch Named Ranges ch√≠nh:")
            key_ranges = ['TotalAssets', 'CurrentAssets', 'CurrentLiabilities', 'TotalEquity', 'Revenue', 'NetIncome']
            for range_name in key_ranges:
                if range_name in self.named_ranges:
                    print(f"   ‚úì {range_name}: {self.named_ranges[range_name]}")
                    
        return filename

# Test v√† ch·∫°y
if __name__ == "__main__":
    generator = EnhancedBalanceSheetGenerator()
    filename = generator.generate_complete_balance_sheet()
    
    if filename:
        print(f"\nüîç H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
        print(f"1. M·ªü file {filename} trong Excel")
        print(f"2. C√°c named ranges ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông")
        print(f"3. S·ª≠ d·ª•ng c√°c c√¥ng th·ª©c nh∆∞: =CurrentAssets/CurrentLiabilities")
        print(f"4. Thay ƒë·ªïi d·ªØ li·ªáu trong b·∫£ng c√¢n ƒë·ªëi ‚Üí c√°c c√¥ng th·ª©c t·ª± ƒë·ªông c·∫≠p nh·∫≠t")
        print(f"5. Xem sheet 'Mapping v√† C√¥ng th·ª©c' ƒë·ªÉ hi·ªÉu c√°ch s·ª≠ d·ª•ng")