"""
Formula Validator - H·ªá th·ªëng Ki·ªÉm tra v√† X√°c th·ª±c C√¥ng th·ª©c
==========================================================

Ki·ªÉm tra t√≠nh ch√≠nh x√°c c·ªßa c√¥ng th·ª©c Excel, named ranges v√† 
ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi k·∫ø to√°n (Assets = Liabilities + Equity)

T√°c gi·∫£: H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông
Chu·∫©n: VAS/Circular 200/2014/TT-BTC
"""

import openpyxl
from openpyxl.workbook.defined_name import DefinedName
import datetime
import json
import os
import shutil
from pathlib import Path

class FormulaValidator:
    def __init__(self, excel_file=None):
        self.excel_file = excel_file
        self.wb = None
        self.validation_results = {
            'timestamp': datetime.datetime.now().isoformat(),
            'file_name': excel_file,
            'balance_equation': {},
            'named_ranges': {},
            'formula_errors': [],
            'data_validation': {},
            'overall_status': 'unknown'
        }
        
    def load_workbook(self, filename=None):
        """T·∫£i workbook Excel ƒë·ªÉ ki·ªÉm tra"""
        if filename:
            self.excel_file = filename
            
        if not self.excel_file or not os.path.exists(self.excel_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {self.excel_file}")
            return False
            
        try:
            self.wb = openpyxl.load_workbook(self.excel_file, data_only=False)
            print(f"‚úÖ ƒê√£ t·∫£i workbook: {self.excel_file}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i workbook: {e}")
            return False
            
    def create_backup(self):
        """T·∫°o backup file tr∆∞·ªõc khi validation"""
        if not self.excel_file:
            return None
            
        try:
            # T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a t·ªìn t·∫°i
            backup_dir = "backups"
            os.makedirs(backup_dir, exist_ok=True)
            
            # T·∫°o t√™n file backup
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = Path(self.excel_file).stem
            extension = Path(self.excel_file).suffix
            backup_filename = f"{backup_dir}/{filename}_backup_{timestamp}{extension}"
            
            # Copy file
            shutil.copy2(self.excel_file, backup_filename)
            print(f"‚úÖ ƒê√£ t·∫°o backup: {backup_filename}")
            
            self.validation_results['backup_file'] = backup_filename
            return backup_filename
            
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói t·∫°o backup: {e}")
            return None
            
    def validate_balance_equation(self):
        """Ki·ªÉm tra ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi: Assets = Liabilities + Equity"""
        print("‚öñÔ∏è  ƒêang ki·ªÉm tra ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi k·∫ø to√°n...")
        
        try:
            # T√¨m sheet b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
            balance_sheet = None
            for sheet_name in self.wb.sheetnames:
                if 'c√¢n ƒë·ªëi' in sheet_name.lower() or 'balance' in sheet_name.lower():
                    balance_sheet = self.wb[sheet_name]
                    break
                    
            if not balance_sheet:
                balance_sheet = self.wb.worksheets[0]  # D√πng sheet ƒë·∫ßu ti√™n
                
            print(f"üìä ƒêang ki·ªÉm tra sheet: {balance_sheet.title}")
            
            # T√¨m c√°c gi√° tr·ªã t·ªïng
            total_assets = None
            total_liabilities = None
            total_equity = None
            total_liab_equity = None
            
            # Qu√©t qua c√°c cell ƒë·ªÉ t√¨m t·ªïng
            for row in balance_sheet.iter_rows():
                for cell in row:
                    if cell.value and isinstance(cell.value, str):
                        cell_text = cell.value.lower()
                        
                        # T√¨m t·ªïng t√†i s·∫£n
                        if 't·ªïng' in cell_text and 't√†i s·∫£n' in cell_text:
                            value_cell = balance_sheet.cell(row=cell.row, column=4)  # C·ªôt D
                            if value_cell.value and isinstance(value_cell.value, (int, float)):
                                total_assets = value_cell.value
                                print(f"   üìà T·ªïng t√†i s·∫£n: {total_assets:,.0f}")
                                
                        # T√¨m t·ªïng n·ª£
                        elif 't·ªïng' in cell_text and 'n·ª£' in cell_text:
                            value_cell = balance_sheet.cell(row=cell.row, column=4)
                            if value_cell.value and isinstance(value_cell.value, (int, float)):
                                total_liabilities = value_cell.value
                                print(f"   üìâ T·ªïng n·ª£ ph·∫£i tr·∫£: {total_liabilities:,.0f}")
                                
                        # T√¨m t·ªïng v·ªën ch·ªß s·ªü h·ªØu
                        elif 't·ªïng' in cell_text and 'v·ªën ch·ªß' in cell_text:
                            value_cell = balance_sheet.cell(row=cell.row, column=4)
                            if value_cell.value and isinstance(value_cell.value, (int, float)):
                                total_equity = value_cell.value
                                print(f"   üí∞ T·ªïng v·ªën ch·ªß s·ªü h·ªØu: {total_equity:,.0f}")
                                
                        # T√¨m t·ªïng ngu·ªìn v·ªën
                        elif 't·ªïng' in cell_text and 'ngu·ªìn v·ªën' in cell_text:
                            value_cell = balance_sheet.cell(row=cell.row, column=4)
                            if value_cell.value and isinstance(value_cell.value, (int, float)):
                                total_liab_equity = value_cell.value
                                print(f"   üè¶ T·ªïng ngu·ªìn v·ªën: {total_liab_equity:,.0f}")
                                
            # Ki·ªÉm tra c√¢n ƒë·ªëi
            balance_result = {
                'total_assets': total_assets,
                'total_liabilities': total_liabilities,
                'total_equity': total_equity,
                'total_liab_equity': total_liab_equity,
                'is_balanced': False,
                'difference': 0,
                'status': 'unknown'
            }
            
            if total_assets and total_liab_equity:
                balance_result['difference'] = abs(total_assets - total_liab_equity)
                balance_result['is_balanced'] = balance_result['difference'] < 1000  # Cho ph√©p sai s·ªë nh·ªè
                
                if balance_result['is_balanced']:
                    balance_result['status'] = 'balanced'
                    print("‚úÖ Ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi CH√çNH X√ÅC!")
                else:
                    balance_result['status'] = 'unbalanced'
                    print(f"‚ùå Ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi KH√îNG CH√çNH X√ÅC!")
                    print(f"   üìä Ch√™nh l·ªách: {balance_result['difference']:,.0f}")
                    
            # Ki·ªÉm tra c√¢n ƒë·ªëi ph·ª• (n·∫øu c√≥ t√°ch ri√™ng n·ª£ v√† v·ªën)
            if total_liabilities and total_equity:
                calculated_total = total_liabilities + total_equity
                if total_assets:
                    alt_difference = abs(total_assets - calculated_total)
                    print(f"   üîç Ki·ªÉm tra ph·ª•: Assets vs (Liabilities + Equity)")
                    print(f"      Ch√™nh l·ªách: {alt_difference:,.0f}")
                    
            self.validation_results['balance_equation'] = balance_result
            return balance_result['is_balanced']
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi: {e}")
            self.validation_results['balance_equation']['error'] = str(e)
            return False
            
    def validate_named_ranges(self):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa named ranges"""
        print("üè∑Ô∏è  ƒêang ki·ªÉm tra named ranges...")
        
        try:
            named_ranges_info = {
                'total_count': 0,
                'valid_ranges': [],
                'invalid_ranges': [],
                'missing_references': [],
                'status': 'unknown'
            }
            
            # Ki·ªÉm tra named ranges trong workbook
            if hasattr(self.wb, 'defined_names') and self.wb.defined_names:
                named_ranges_info['total_count'] = len(self.wb.defined_names)
                print(f"üìä T·ªïng s·ªë named ranges: {named_ranges_info['total_count']}")
                
                for name, defined_name in self.wb.defined_names.items():
                    try:
                        # Ki·ªÉm tra reference c√≥ h·ª£p l·ªá kh√¥ng
                        if hasattr(defined_name, 'attr_text') and defined_name.attr_text:
                            # Ki·ªÉm tra cell reference
                            ref = defined_name.attr_text
                            is_valid = self.validate_cell_reference(ref)
                            
                            range_info = {
                                'name': name,
                                'reference': ref,
                                'is_valid': is_valid
                            }
                            
                            if is_valid:
                                named_ranges_info['valid_ranges'].append(range_info)
                                print(f"   ‚úÖ {name}: {ref}")
                            else:
                                named_ranges_info['invalid_ranges'].append(range_info)
                                print(f"   ‚ùå {name}: {ref} (kh√¥ng h·ª£p l·ªá)")
                                
                        else:
                            named_ranges_info['invalid_ranges'].append({
                                'name': name,
                                'reference': 'undefined',
                                'is_valid': False
                            })
                            print(f"   ‚ùå {name}: Kh√¥ng c√≥ reference")
                            
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  L·ªói ki·ªÉm tra {name}: {e}")
                        named_ranges_info['invalid_ranges'].append({
                            'name': name,
                            'reference': 'error',
                            'is_valid': False,
                            'error': str(e)
                        })
                        
            else:
                print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y named ranges trong workbook")
                
            # Ki·ªÉm tra c√°c named ranges c·∫ßn thi·∫øt
            required_ranges = [
                'TotalAssets', 'CurrentAssets', 'NonCurrentAssets',
                'TotalLiabilities', 'CurrentLiabilities', 'NonCurrentLiabilities',
                'TotalEquity', 'Revenue', 'NetIncome'
            ]
            
            existing_names = [r['name'] for r in named_ranges_info['valid_ranges']]
            for required in required_ranges:
                if required not in existing_names:
                    named_ranges_info['missing_references'].append(required)
                    
            if named_ranges_info['missing_references']:
                print(f"‚ö†Ô∏è  Thi·∫øu named ranges: {', '.join(named_ranges_info['missing_references'])}")
                
            # ƒê√°nh gi√° t·ªïng th·ªÉ
            valid_count = len(named_ranges_info['valid_ranges'])
            total_count = named_ranges_info['total_count']
            missing_count = len(named_ranges_info['missing_references'])
            
            if total_count > 0 and valid_count / total_count >= 0.8 and missing_count == 0:
                named_ranges_info['status'] = 'good'
                print("‚úÖ Named ranges: T·ªêT")
            elif valid_count > 0:
                named_ranges_info['status'] = 'warning'
                print("‚ö†Ô∏è  Named ranges: C·∫¶N CH√ö √ù")
            else:
                named_ranges_info['status'] = 'poor'
                print("‚ùå Named ranges: THI·∫æU HO·∫∂C L·ªñI")
                
            self.validation_results['named_ranges'] = named_ranges_info
            return named_ranges_info['status'] in ['good', 'warning']
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra named ranges: {e}")
            self.validation_results['named_ranges']['error'] = str(e)
            return False
            
    def validate_cell_reference(self, reference):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa cell reference"""
        try:
            # Ki·ªÉm tra format c∆° b·∫£n c·ªßa cell reference
            if not reference:
                return False
                
            # Lo·∫°i b·ªè sheet name n·∫øu c√≥
            if '!' in reference:
                sheet_part, cell_part = reference.split('!', 1)
                # Ki·ªÉm tra sheet c√≥ t·ªìn t·∫°i kh√¥ng
                sheet_name = sheet_part.strip("'\"")
                if sheet_name not in self.wb.sheetnames:
                    return False
                reference = cell_part
                
            # Ki·ªÉm tra format cell (nh∆∞ D10, A1:B5)
            import re
            cell_pattern = r'^[A-Z]+\d+$|^[A-Z]+\d+:[A-Z]+\d+$'
            return bool(re.match(cell_pattern, reference.strip()))
            
        except:
            return False
            
    def validate_formulas(self):
        """Ki·ªÉm tra c√¥ng th·ª©c Excel c√≥ l·ªói kh√¥ng"""
        print("üßÆ ƒêang ki·ªÉm tra c√¥ng th·ª©c Excel...")
        
        formula_errors = []
        
        try:
            for sheet_name in self.wb.sheetnames:
                sheet = self.wb[sheet_name]
                print(f"   üìã ƒêang ki·ªÉm tra sheet: {sheet_name}")
                
                for row in sheet.iter_rows():
                    for cell in row:
                        if cell.value and isinstance(cell.value, str) and cell.value.startswith('='):
                            formula = cell.value
                            
                            # Ki·ªÉm tra c√°c l·ªói ph·ªï bi·∫øn
                            error_checks = [
                                ('#REF!', 'Reference error - Tham chi·∫øu kh√¥ng h·ª£p l·ªá'),
                                ('#DIV/0!', 'Division by zero - Chia cho 0'),
                                ('#NAME?', 'Name error - T√™n kh√¥ng ƒë∆∞·ª£c nh·∫≠n d·∫°ng'),
                                ('#VALUE!', 'Value error - L·ªói gi√° tr·ªã'),
                                ('#N/A', 'Not available - Gi√° tr·ªã kh√¥ng c√≥'),
                                ('#NULL!', 'Null error - L·ªói null'),
                                ('#NUM!', 'Number error - L·ªói s·ªë')
                            ]
                            
                            for error_code, description in error_checks:
                                if error_code in formula:
                                    error_info = {
                                        'sheet': sheet_name,
                                        'cell': f"{cell.column_letter}{cell.row}",
                                        'formula': formula,
                                        'error_type': error_code,
                                        'description': description
                                    }
                                    formula_errors.append(error_info)
                                    print(f"   ‚ùå {error_info['cell']}: {error_code} - {description}")
                                    
            if not formula_errors:
                print("‚úÖ Kh√¥ng t√¨m th·∫•y l·ªói c√¥ng th·ª©c")
            else:
                print(f"‚ö†Ô∏è  T√¨m th·∫•y {len(formula_errors)} l·ªói c√¥ng th·ª©c")
                
            self.validation_results['formula_errors'] = formula_errors
            return len(formula_errors) == 0
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra c√¥ng th·ª©c: {e}")
            return False
            
    def validate_data_integrity(self):
        """Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu"""
        print("üîç ƒêang ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu...")
        
        try:
            data_validation = {
                'positive_values': True,
                'reasonable_ranges': True,
                'data_types': True,
                'completeness': True,
                'issues': []
            }
            
            # T√¨m sheet b·∫£ng c√¢n ƒë·ªëi
            balance_sheet = None
            for sheet_name in self.wb.sheetnames:
                if 'c√¢n ƒë·ªëi' in sheet_name.lower() or 'balance' in sheet_name.lower():
                    balance_sheet = self.wb[sheet_name]
                    break
                    
            if balance_sheet:
                print(f"   üìä Ki·ªÉm tra d·ªØ li·ªáu trong sheet: {balance_sheet.title}")
                
                # Ki·ªÉm tra c√°c kho·∫£n m·ª•c ch√≠nh ph·∫£i c√≥ gi√° tr·ªã d∆∞∆°ng
                positive_check_items = [
                    't√†i s·∫£n', 'v·ªën ch·ªß s·ªü h·ªØu', 'ti·ªÅn', 'h√†ng t·ªìn kho'
                ]
                
                for row in balance_sheet.iter_rows():
                    for cell in row:
                        if cell.value and isinstance(cell.value, str):
                            cell_text = cell.value.lower()
                            
                            for item in positive_check_items:
                                if item in cell_text and 't·ªïng' not in cell_text:
                                    # Ki·ªÉm tra gi√° tr·ªã t∆∞∆°ng ·ª©ng
                                    value_cell = balance_sheet.cell(row=cell.row, column=4)
                                    if value_cell.value and isinstance(value_cell.value, (int, float)):
                                        if value_cell.value < 0:
                                            issue = f"Gi√° tr·ªã √¢m t·∫°i {cell.coordinate}: {cell_text}"
                                            data_validation['issues'].append(issue)
                                            data_validation['positive_values'] = False
                                            print(f"   ‚ö†Ô∏è  {issue}")
                                            
                # Ki·ªÉm tra kho·∫£ng gi√° tr·ªã h·ª£p l√Ω (kh√¥ng qu√° l·ªõn ho·∫∑c qu√° nh·ªè)
                for row in balance_sheet.iter_rows():
                    for cell in row:
                        if cell.value and isinstance(cell.value, (int, float)):
                            if cell.value > 1e15:  # Qu√° l·ªõn
                                issue = f"Gi√° tr·ªã qu√° l·ªõn t·∫°i {cell.coordinate}: {cell.value}"
                                data_validation['issues'].append(issue)
                                data_validation['reasonable_ranges'] = False
                                print(f"   ‚ö†Ô∏è  {issue}")
                            elif cell.value < -1e15:  # Qu√° nh·ªè (√¢m)
                                issue = f"Gi√° tr·ªã qu√° nh·ªè t·∫°i {cell.coordinate}: {cell.value}"
                                data_validation['issues'].append(issue)
                                data_validation['reasonable_ranges'] = False
                                print(f"   ‚ö†Ô∏è  {issue}")
                                
            if not data_validation['issues']:
                print("‚úÖ D·ªØ li·ªáu to√†n v·∫πn")
            else:
                print(f"‚ö†Ô∏è  T√¨m th·∫•y {len(data_validation['issues'])} v·∫•n ƒë·ªÅ d·ªØ li·ªáu")
                
            self.validation_results['data_validation'] = data_validation
            return len(data_validation['issues']) == 0
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra d·ªØ li·ªáu: {e}")
            return False
            
    def run_complete_validation(self, create_backup=True):
        """Ch·∫°y to√†n b·ªô qu√° tr√¨nh validation"""
        print("üîç B·∫ÆT ƒê·∫¶U VALIDATION TO√ÄN DI·ªÜN...")
        print("=" * 60)
        
        # T·∫°o backup n·∫øu c·∫ßn
        if create_backup:
            self.create_backup()
            
        # Load workbook
        if not self.load_workbook():
            return False
            
        # Ch·∫°y c√°c ki·ªÉm tra
        checks = {
            'balance_equation': self.validate_balance_equation(),
            'named_ranges': self.validate_named_ranges(), 
            'formulas': self.validate_formulas(),
            'data_integrity': self.validate_data_integrity()
        }
        
        # ƒê√°nh gi√° t·ªïng th·ªÉ
        passed_checks = sum(checks.values())
        total_checks = len(checks)
        
        if passed_checks == total_checks:
            self.validation_results['overall_status'] = 'excellent'
            status_msg = "XU·∫§T S·∫ÆC"
            status_icon = "üéâ"
        elif passed_checks >= total_checks * 0.75:
            self.validation_results['overall_status'] = 'good'
            status_msg = "T·ªêT"
            status_icon = "‚úÖ"
        elif passed_checks >= total_checks * 0.5:
            self.validation_results['overall_status'] = 'fair'
            status_msg = "CH·∫§P NH·∫¨N ƒê∆Ø·ª¢C"
            status_icon = "‚ö†Ô∏è"
        else:
            self.validation_results['overall_status'] = 'poor'
            status_msg = "C·∫¶N C·∫¢I THI·ªÜN"
            status_icon = "‚ùå"
            
        print("\n" + "=" * 60)
        print(f"{status_icon} K·∫æT QU·∫¢ VALIDATION T·ªîNG TH·ªÇ: {status_msg}")
        print(f"üìä ƒê√£ qua: {passed_checks}/{total_checks} ki·ªÉm tra")
        
        # In chi ti·∫øt k·∫øt qu·∫£
        print("\nüìã CHI TI·∫æT K·∫æT QU·∫¢:")
        for check_name, result in checks.items():
            icon = "‚úÖ" if result else "‚ùå"
            name_map = {
                'balance_equation': 'Ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi',
                'named_ranges': 'Named ranges', 
                'formulas': 'C√¥ng th·ª©c Excel',
                'data_integrity': 'T√≠nh to√†n v·∫πn d·ªØ li·ªáu'
            }
            print(f"   {icon} {name_map.get(check_name, check_name)}: {'PASS' if result else 'FAIL'}")
            
        # L∆∞u k·∫øt qu·∫£
        self.save_validation_report()
        
        return self.validation_results['overall_status'] in ['excellent', 'good']
        
    def save_validation_report(self):
        """L∆∞u b√°o c√°o validation"""
        try:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # L∆∞u JSON report
            json_filename = f"validation_report_{timestamp}.json"
            with open(json_filename, 'w', encoding='utf-8') as f:
                json.dump(self.validation_results, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o JSON: {json_filename}")
            
            # L∆∞u text report
            text_filename = f"validation_report_{timestamp}.txt"
            with open(text_filename, 'w', encoding='utf-8') as f:
                f.write("B√ÅO C√ÅO VALIDATION H·ªÜ TH·ªêNG T√ÄI CH√çNH ƒê·ªòNG\n")
                f.write("=" * 60 + "\n")
                f.write(f"Th·ªùi gian: {self.validation_results['timestamp']}\n")
                f.write(f"File: {self.validation_results['file_name']}\n")
                f.write(f"Tr·∫°ng th√°i t·ªïng th·ªÉ: {self.validation_results['overall_status']}\n\n")
                
                # Chi ti·∫øt ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi
                if 'balance_equation' in self.validation_results:
                    f.write("1. PH∆Ø∆†NG TR√åNH C√ÇN ƒê·ªêI K·∫æ TO√ÅN:\n")
                    balance = self.validation_results['balance_equation']
                    f.write(f"   - T·ªïng t√†i s·∫£n: {balance.get('total_assets', 'N/A')}\n")
                    f.write(f"   - T·ªïng ngu·ªìn v·ªën: {balance.get('total_liab_equity', 'N/A')}\n")
                    f.write(f"   - Ch√™nh l·ªách: {balance.get('difference', 'N/A')}\n")
                    f.write(f"   - Tr·∫°ng th√°i: {balance.get('status', 'N/A')}\n\n")
                    
                # Chi ti·∫øt named ranges
                if 'named_ranges' in self.validation_results:
                    f.write("2. NAMED RANGES:\n")
                    nr = self.validation_results['named_ranges']
                    f.write(f"   - T·ªïng s·ªë: {nr.get('total_count', 0)}\n")
                    f.write(f"   - H·ª£p l·ªá: {len(nr.get('valid_ranges', []))}\n")
                    f.write(f"   - Kh√¥ng h·ª£p l·ªá: {len(nr.get('invalid_ranges', []))}\n")
                    f.write(f"   - Thi·∫øu: {len(nr.get('missing_references', []))}\n\n")
                    
                # Chi ti·∫øt l·ªói c√¥ng th·ª©c
                if 'formula_errors' in self.validation_results:
                    f.write("3. L·ªñI C√îNG TH·ª®C:\n")
                    errors = self.validation_results['formula_errors']
                    f.write(f"   - S·ªë l·ªói: {len(errors)}\n")
                    for error in errors:
                        f.write(f"   - {error.get('sheet')}.{error.get('cell')}: {error.get('error_type')}\n")
                    f.write("\n")
                    
                # Chi ti·∫øt d·ªØ li·ªáu
                if 'data_validation' in self.validation_results:
                    f.write("4. T√çNH TO√ÄN V·∫∏N D·ªÆ LI·ªÜU:\n")
                    data = self.validation_results['data_validation']
                    f.write(f"   - Gi√° tr·ªã d∆∞∆°ng: {data.get('positive_values', False)}\n")
                    f.write(f"   - Kho·∫£ng h·ª£p l√Ω: {data.get('reasonable_ranges', False)}\n")
                    f.write(f"   - S·ªë v·∫•n ƒë·ªÅ: {len(data.get('issues', []))}\n")
                    
            print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o text: {text_filename}")
            
            return json_filename, text_filename
            
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói l∆∞u b√°o c√°o: {e}")
            return None, None

# Test v√† ch·∫°y
if __name__ == "__main__":
    # Ki·ªÉm tra file balance sheet m·ªõi t·∫°o
    balance_files = [f for f in os.listdir('.') if f.startswith('bang_can_doi_ke_toan_dynamic_') and f.endswith('.xlsx')]
    
    if balance_files:
        latest_file = max(balance_files, key=os.path.getctime)
        print(f"üîç T√¨m th·∫•y file balance sheet: {latest_file}")
        
        validator = FormulaValidator(latest_file)
        result = validator.run_complete_validation()
        
        if result:
            print("\nüéâ H·ªÜ TH·ªêNG ƒê√É ƒê·∫¨T CHU·∫®N VALIDATION!")
        else:
            print("\n‚ö†Ô∏è  H·ªÜ TH·ªêNG C·∫¶N C·∫¢I THI·ªÜN!")
            
        print("\nüí° Khuy·∫øn ngh·ªã:")
        print("1. Ki·ªÉm tra b√°o c√°o validation chi ti·∫øt")
        print("2. S·ª≠a c√°c l·ªói ƒë∆∞·ª£c ph√°t hi·ªán")
        print("3. Ch·∫°y l·∫°i validation sau khi s·ª≠a")
        print("4. Backup file tr∆∞·ªõc khi thay ƒë·ªïi")
        
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file balance sheet ƒë·ªÉ ki·ªÉm tra")
        print("üí° Ch·∫°y enhanced_balance_sheet_generator.py tr∆∞·ªõc")