"""
Multi-Period Analyzer - H·ªá th·ªëng Ph√¢n t√≠ch Nhi·ªÅu K·ª≥
====================================================

Ph√¢n t√≠ch so s√°nh d·ªØ li·ªáu t√†i ch√≠nh qua nhi·ªÅu k·ª≥ b√°o c√°o
v·ªõi c√¥ng th·ª©c Excel ƒë·ªông v√† t√≠nh to√°n xu h∆∞·ªõng tƒÉng tr∆∞·ªüng

T√°c gi·∫£: H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông
Chu·∫©n: VAS/Circular 200/2014/TT-BTC
"""

import openpyxl
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.chart import LineChart, BarChart, Reference
from openpyxl.workbook.defined_name import DefinedName
import datetime
import json
import os

class MultiPeriodAnalyzer:
    def __init__(self, periods=3):
        self.periods = periods  # S·ªë k·ª≥ so s√°nh (m·∫∑c ƒë·ªãnh 3 k·ª≥)
        self.wb = None
        self.sheets = {}
        
        # Thi·∫øt l·∫≠p style
        self.setup_styles()
        
        # D·ªØ li·ªáu m·∫´u cho nhi·ªÅu k·ª≥
        self.setup_multi_period_data()
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p c√°c style Excel chuy√™n nghi·ªáp"""
        self.font_header = Font(name='Times New Roman', size=14, bold=True, color='FFFFFF')
        self.font_title = Font(name='Times New Roman', size=12, bold=True)
        self.font_normal = Font(name='Times New Roman', size=11)
        self.font_bold = Font(name='Times New Roman', size=11, bold=True)
        
        # M√†u s·∫Øc theo t·ª´ng k·ª≥
        self.fill_header = PatternFill(start_color='2F5597', end_color='2F5597', fill_type='solid')
        self.fill_current = PatternFill(start_color='D9E2F3', end_color='D9E2F3', fill_type='solid')
        self.fill_previous = PatternFill(start_color='E7E6E6', end_color='E7E6E6', fill_type='solid')
        self.fill_trend_up = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')
        self.fill_trend_down = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')
        
        # Border
        self.border_thin = Border(
            left=Side(style='thin'), right=Side(style='thin'),
            top=Side(style='thin'), bottom=Side(style='thin')
        )
        
    def setup_multi_period_data(self):
        """Thi·∫øt l·∫≠p d·ªØ li·ªáu m·∫´u cho nhi·ªÅu k·ª≥"""
        # D·ªØ li·ªáu 3 k·ª≥: 2022, 2023, 2024
        self.period_data = {
            '2022': {
                'total_assets': 120000000000,
                'current_assets': 50000000000,
                'current_liabilities': 30000000000,
                'total_equity': 60000000000,
                'revenue': 70000000000,
                'net_income': 7000000000,
                'inventory': 15000000000,
                'accounts_receivable': 10000000000
            },
            '2023': {
                'total_assets': 130000000000,
                'current_assets': 58000000000,
                'current_liabilities': 35000000000,
                'total_equity': 65000000000,
                'revenue': 80000000000,
                'net_income': 8640000000,
                'inventory': 18000000000,
                'accounts_receivable': 12000000000
            },
            '2024': {
                'total_assets': 145000000000,
                'current_assets': 68000000000,
                'current_liabilities': 40000000000,
                'total_equity': 75000000000,
                'revenue': 92000000000,
                'net_income': 11040000000,
                'inventory': 20000000000,
                'accounts_receivable': 14000000000
            }
        }
        
        # Danh s√°ch c√°c k·ª≥
        self.periods_list = list(self.period_data.keys())
        
    def create_multi_period_workbook(self):
        """T·∫°o workbook ph√¢n t√≠ch nhi·ªÅu k·ª≥"""
        print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o h·ªá th·ªëng ph√¢n t√≠ch nhi·ªÅu k·ª≥...")
        
        self.wb = openpyxl.Workbook()
        
        # T·∫°o c√°c sheet
        self.create_multi_period_balance_sheet()
        self.create_trend_analysis_sheet()
        self.create_growth_analysis_sheet()
        self.create_ratio_comparison_sheet()
        self.create_forecast_sheet()
        
        print("‚úÖ Ho√†n th√†nh t·∫°o workbook ph√¢n t√≠ch nhi·ªÅu k·ª≥")
        
    def create_multi_period_balance_sheet(self):
        """T·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n nhi·ªÅu k·ª≥"""
        print("üìä ƒêang t·∫°o b·∫£ng c√¢n ƒë·ªëi nhi·ªÅu k·ª≥...")
        
        ws = self.wb.active
        ws.title = "B·∫£ng C√¢n ƒê·ªëi Nhi·ªÅu K·ª≥"
        self.sheets['balance'] = ws
        
        # Header
        ws.merge_cells('A1:F1')
        cell = ws['A1']
        cell.value = "B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN NHI·ªÄU K·ª≤ SO S√ÅNH"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # Header c·ªôt
        row = 3
        ws[f'A{row}'] = "Ch·ªâ ti√™u"
        col = 2
        for period in self.periods_list:
            ws.cell(row=row, column=col).value = f"NƒÉm {period}"
            ws.cell(row=row, column=col).font = self.font_bold
            ws.cell(row=row, column=col).fill = self.fill_current
            ws.cell(row=row, column=col).border = self.border_thin
            col += 1
            
        # C·ªôt tƒÉng tr∆∞·ªüng
        ws.cell(row=row, column=col).value = "TƒÉng tr∆∞·ªüng (%)"
        ws.cell(row=row, column=col).font = self.font_bold
        ws.cell(row=row, column=col).fill = self.fill_trend_up
        ws.cell(row=row, column=col).border = self.border_thin
        
        row += 1
        
        # D·ªØ li·ªáu t√†i s·∫£n
        balance_items = [
            ('T·ªïng t√†i s·∫£n', 'total_assets'),
            ('T√†i s·∫£n ng·∫Øn h·∫°n', 'current_assets'),
            ('N·ª£ ng·∫Øn h·∫°n', 'current_liabilities'),
            ('V·ªën ch·ªß s·ªü h·ªØu', 'total_equity'),
            ('Doanh thu', 'revenue'),
            ('L·ª£i nhu·∫≠n sau thu·∫ø', 'net_income'),
            ('H√†ng t·ªìn kho', 'inventory'),
            ('Ph·∫£i thu kh√°ch h√†ng', 'accounts_receivable')
        ]
        
        for item_name, data_key in balance_items:
            ws[f'A{row}'] = item_name
            ws[f'A{row}'].font = self.font_bold
            
            col = 2
            values = []
            for period in self.periods_list:
                value = self.period_data[period][data_key]
                values.append(value)
                ws.cell(row=row, column=col).value = value
                ws.cell(row=row, column=col).number_format = '#,##0'
                ws.cell(row=row, column=col).border = self.border_thin
                
                # T·∫°o named range cho t·ª´ng k·ª≥
                range_name = f"{data_key}_{period}"
                cell_ref = f"'{ws.title}'!{ws.cell(row=row, column=col).coordinate}"
                self.create_named_range(range_name, cell_ref)
                
                col += 1
                
            # T√≠nh tƒÉng tr∆∞·ªüng (c√¥ng th·ª©c Excel)
            if len(values) >= 2:
                first_col = chr(66)  # C·ªôt B
                last_col = chr(66 + len(self.periods_list) - 1)
                growth_formula = f"=({last_col}{row}-{first_col}{row})/{first_col}{row}*100"
                ws.cell(row=row, column=col).value = growth_formula
                ws.cell(row=row, column=col).number_format = '0.00%'
                ws.cell(row=row, column=col).border = self.border_thin
                
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        ws.column_dimensions['A'].width = 25
        for i in range(2, 2 + len(self.periods_list) + 1):
            ws.column_dimensions[chr(64 + i)].width = 18
            
        print("‚úÖ Ho√†n th√†nh b·∫£ng c√¢n ƒë·ªëi nhi·ªÅu k·ª≥")
        
    def create_trend_analysis_sheet(self):
        """T·∫°o sheet ph√¢n t√≠ch xu h∆∞·ªõng"""
        print("üìà ƒêang t·∫°o sheet Ph√¢n t√≠ch Xu h∆∞·ªõng...")
        
        ws = self.wb.create_sheet("Ph√¢n T√≠ch Xu H∆∞·ªõng")
        self.sheets['trend'] = ws
        
        # Header
        ws.merge_cells('A1:G1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH XU H∆Ø·ªöNG PH√ÅT TRI·ªÇN"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # B·∫£ng c√°c ch·ªâ s·ªë t√†i ch√≠nh qua c√°c k·ª≥
        row = 3
        ws.merge_cells(f'A{row}:G{row}')
        cell = ws[f'A{row}']
        cell.value = "C√ÅC CH·ªà S·ªê T√ÄI CH√çNH QUA C√ÅC K·ª≤"
        cell.font = self.font_title
        cell.fill = self.fill_current
        row += 1
        
        # Header
        headers = ['Ch·ªâ s·ªë'] + [f'NƒÉm {p}' for p in self.periods_list] + ['Xu h∆∞·ªõng', 'ƒê√°nh gi√°']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_current
            cell.border = self.border_thin
        row += 1
        
        # C√°c ch·ªâ s·ªë t√†i ch√≠nh v·ªõi c√¥ng th·ª©c ƒë·ªông
        financial_ratios = [
            ('Current Ratio', 'current_assets', 'current_liabilities', '={}/{}'),
            ('ROA (%)', 'net_income', 'total_assets', '={}*100/{}'),
            ('ROE (%)', 'net_income', 'total_equity', '={}*100/{}'),
            ('Asset Turnover', 'revenue', 'total_assets', '={}/{}'),
            ('Inventory Turnover', 'revenue', 'inventory', '={}/{}'),
            ('Revenue Growth (%)', 'revenue', None, None)
        ]
        
        for ratio_name, numerator, denominator, formula_template in financial_ratios:
            ws[f'A{row}'] = ratio_name
            ws[f'A{row}'].font = self.font_bold
            
            col = 2
            ratio_values = []
            
            for period in self.periods_list:
                if denominator:
                    # T√≠nh t·ª∑ s·ªë
                    num_val = self.period_data[period][numerator]
                    den_val = self.period_data[period][denominator]
                    
                    if ratio_name in ['ROA (%)', 'ROE (%)']:
                        ratio_val = (num_val / den_val) * 100
                    else:
                        ratio_val = num_val / den_val
                else:
                    # ƒê·ªëi v·ªõi revenue growth, t√≠nh ri√™ng
                    ratio_val = self.period_data[period][numerator] / 1000000000  # T·ª∑ VND
                    
                ratio_values.append(ratio_val)
                ws.cell(row=row, column=col).value = ratio_val
                
                if ratio_name in ['ROA (%)', 'ROE (%)']:
                    ws.cell(row=row, column=col).number_format = '0.00%'
                else:
                    ws.cell(row=row, column=col).number_format = '#,##0.00'
                    
                ws.cell(row=row, column=col).border = self.border_thin
                col += 1
                
            # Ph√¢n t√≠ch xu h∆∞·ªõng
            if len(ratio_values) >= 2:
                trend = "TƒÉng" if ratio_values[-1] > ratio_values[0] else "Gi·∫£m"
                ws.cell(row=row, column=col).value = trend
                if trend == "TƒÉng":
                    ws.cell(row=row, column=col).fill = self.fill_trend_up
                else:
                    ws.cell(row=row, column=col).fill = self.fill_trend_down
                ws.cell(row=row, column=col).border = self.border_thin
                col += 1
                
                # ƒê√°nh gi√°
                evaluation = self.evaluate_trend(ratio_name, ratio_values)
                ws.cell(row=row, column=col).value = evaluation
                ws.cell(row=row, column=col).border = self.border_thin
                
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        ws.column_dimensions['A'].width = 20
        for i in range(2, 8):
            ws.column_dimensions[chr(64 + i)].width = 15
            
        print("‚úÖ Ho√†n th√†nh sheet Ph√¢n t√≠ch Xu h∆∞·ªõng")
        
    def create_growth_analysis_sheet(self):
        """T·∫°o sheet ph√¢n t√≠ch tƒÉng tr∆∞·ªüng"""
        print("üå± ƒêang t·∫°o sheet Ph√¢n t√≠ch TƒÉng tr∆∞·ªüng...")
        
        ws = self.wb.create_sheet("Ph√¢n T√≠ch TƒÉng Tr∆∞·ªüng")
        self.sheets['growth'] = ws
        
        # Header
        ws.merge_cells('A1:F1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH T·ªêC ƒê·ªò TƒÇNG TR∆Ø·ªûNG"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # B·∫£ng t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng h√†ng nƒÉm
        row = 3
        ws.merge_cells(f'A{row}:F{row}')
        cell = ws[f'A{row}']
        cell.value = "T·ªêC ƒê·ªò TƒÇNG TR∆Ø·ªûNG H√ÄNG NƒÇM (%)"
        cell.font = self.font_title
        cell.fill = self.fill_current
        row += 1
        
        # Header
        headers = ['Ch·ªâ ti√™u', '2022-2023', '2023-2024', 'Trung b√¨nh', 'Xu h∆∞·ªõng', 'D·ª± b√°o 2025']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_current
            cell.border = self.border_thin
        row += 1
        
        # C√°c kho·∫£n m·ª•c c·∫ßn t√≠nh tƒÉng tr∆∞·ªüng
        growth_items = [
            ('T·ªïng t√†i s·∫£n', 'total_assets'),
            ('T√†i s·∫£n ng·∫Øn h·∫°n', 'current_assets'), 
            ('V·ªën ch·ªß s·ªü h·ªØu', 'total_equity'),
            ('Doanh thu', 'revenue'),
            ('L·ª£i nhu·∫≠n sau thu·∫ø', 'net_income'),
            ('H√†ng t·ªìn kho', 'inventory'),
            ('Ph·∫£i thu kh√°ch h√†ng', 'accounts_receivable')
        ]
        
        for item_name, data_key in growth_items:
            ws[f'A{row}'] = item_name
            ws[f'A{row}'].font = self.font_bold
            
            # T√≠nh tƒÉng tr∆∞·ªüng t·ª´ng nƒÉm
            periods = self.periods_list
            growth_rates = []
            
            for i in range(1, len(periods)):
                prev_value = self.period_data[periods[i-1]][data_key]
                curr_value = self.period_data[periods[i]][data_key]
                growth_rate = ((curr_value - prev_value) / prev_value) * 100
                growth_rates.append(growth_rate)
                
                ws.cell(row=row, column=i+1).value = growth_rate
                ws.cell(row=row, column=i+1).number_format = '0.00%'
                ws.cell(row=row, column=i+1).border = self.border_thin
                
                if growth_rate > 0:
                    ws.cell(row=row, column=i+1).fill = self.fill_trend_up
                else:
                    ws.cell(row=row, column=i+1).fill = self.fill_trend_down
                    
            # TƒÉng tr∆∞·ªüng trung b√¨nh
            avg_growth = sum(growth_rates) / len(growth_rates)
            ws.cell(row=row, column=len(periods)+1).value = avg_growth
            ws.cell(row=row, column=len(periods)+1).number_format = '0.00%'
            ws.cell(row=row, column=len(periods)+1).border = self.border_thin
            
            # Xu h∆∞·ªõng
            trend = "TƒÉng t·ªëc" if growth_rates[-1] > growth_rates[0] else "Ch·∫≠m l·∫°i"
            ws.cell(row=row, column=len(periods)+2).value = trend
            ws.cell(row=row, column=len(periods)+2).border = self.border_thin
            
            # D·ª± b√°o nƒÉm ti·∫øp theo (c√¥ng th·ª©c Excel)
            last_value = self.period_data[periods[-1]][data_key]
            forecast_formula = f"={last_value}*(1+{avg_growth/100})"
            ws.cell(row=row, column=len(periods)+3).value = forecast_formula
            ws.cell(row=row, column=len(periods)+3).number_format = '#,##0'
            ws.cell(row=row, column=len(periods)+3).border = self.border_thin
            
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        ws.column_dimensions['A'].width = 25
        for i in range(2, 7):
            ws.column_dimensions[chr(64 + i)].width = 15
            
        print("‚úÖ Ho√†n th√†nh sheet Ph√¢n t√≠ch TƒÉng tr∆∞·ªüng")
        
    def create_ratio_comparison_sheet(self):
        """T·∫°o sheet so s√°nh ch·ªâ s·ªë"""
        print("üìä ƒêang t·∫°o sheet So s√°nh Ch·ªâ s·ªë...")
        
        ws = self.wb.create_sheet("So S√°nh Ch·ªâ S·ªë")
        self.sheets['ratios'] = ws
        
        # Header
        ws.merge_cells('A1:H1')
        cell = ws['A1']
        cell.value = "SO S√ÅNH CH·ªà S·ªê T√ÄI CH√çNH QUA C√ÅC K·ª≤"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # B·∫£ng so s√°nh chi ti·∫øt
        row = 3
        
        # 1. Nh√≥m ch·ªâ s·ªë thanh kho·∫£n
        ws.merge_cells(f'A{row}:H{row}')
        cell = ws[f'A{row}']
        cell.value = "1. CH·ªà S·ªê THANH KHO·∫¢N"
        cell.font = self.font_title
        cell.fill = self.fill_current
        row += 1
        
        self.create_ratio_table(ws, row, [
            ('Current Ratio', 'current_assets', 'current_liabilities'),
            ('Quick Ratio', 'current_assets-inventory', 'current_liabilities'),
        ])
        
        print("‚úÖ Ho√†n th√†nh sheet So s√°nh Ch·ªâ s·ªë")
        
    def create_ratio_table(self, ws, start_row, ratios):
        """T·∫°o b·∫£ng ch·ªâ s·ªë v·ªõi c√¥ng th·ª©c ƒë·ªông"""
        headers = ['Ch·ªâ s·ªë'] + [f'NƒÉm {p}' for p in self.periods_list] + ['Thay ƒë·ªïi', 'ƒê√°nh gi√°']
        
        row = start_row
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_current
            cell.border = self.border_thin
        row += 1
        
        for ratio_name, numerator, denominator in ratios:
            ws[f'A{row}'] = ratio_name
            ws[f'A{row}'].font = self.font_bold
            
            col = 2
            for period in self.periods_list:
                # T·∫°o c√¥ng th·ª©c Excel ƒë·ªông
                if '-' in numerator:
                    parts = numerator.split('-')
                    num_formula = f"={parts[0]}_{period}-{parts[1]}_{period}"
                else:
                    num_formula = f"={numerator}_{period}"
                    
                den_formula = f"={denominator}_{period}"
                ratio_formula = f"={num_formula}/{den_formula}"
                
                ws.cell(row=row, column=col).value = ratio_formula
                ws.cell(row=row, column=col).number_format = '0.00'
                ws.cell(row=row, column=col).border = self.border_thin
                col += 1
                
            row += 1
            
    def create_forecast_sheet(self):
        """T·∫°o sheet d·ª± b√°o"""
        print("üîÆ ƒêang t·∫°o sheet D·ª± b√°o...")
        
        ws = self.wb.create_sheet("D·ª± B√°o T√†i Ch√≠nh")
        self.sheets['forecast'] = ws
        
        # Header
        ws.merge_cells('A1:F1')
        cell = ws['A1']
        cell.value = "D·ª∞ B√ÅO T√ÄI CH√çNH D·ª∞A TR√äN XU H∆Ø·ªöNG"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # B·∫£ng d·ª± b√°o
        row = 3
        ws.merge_cells(f'A{row}:F{row}')
        cell = ws[f'A{row}']
        cell.value = "D·ª∞ B√ÅO C√ÅC CH·ªà TI√äU CH√çNH NƒÇM 2025"
        cell.font = self.font_title
        cell.fill = self.fill_current
        row += 1
        
        # Header
        headers = ['Ch·ªâ ti√™u', 'NƒÉm 2024', 'TƒÉng tr∆∞·ªüng TB', 'D·ª± b√°o 2025', 'K·ªãch b·∫£n l·∫°c quan', 'K·ªãch b·∫£n th·∫≠n tr·ªçng']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_current
            cell.border = self.border_thin
        row += 1
        
        # D·ª± b√°o c√°c kho·∫£n m·ª•c ch√≠nh
        forecast_items = [
            ('Doanh thu', 'revenue'),
            ('L·ª£i nhu·∫≠n sau thu·∫ø', 'net_income'),
            ('T·ªïng t√†i s·∫£n', 'total_assets'),
            ('V·ªën ch·ªß s·ªü h·ªØu', 'total_equity')
        ]
        
        for item_name, data_key in forecast_items:
            ws[f'A{row}'] = item_name
            ws[f'A{row}'].font = self.font_bold
            
            # Gi√° tr·ªã nƒÉm 2024
            value_2024 = self.period_data['2024'][data_key]
            ws.cell(row=row, column=2).value = value_2024
            ws.cell(row=row, column=2).number_format = '#,##0'
            
            # T√≠nh tƒÉng tr∆∞·ªüng trung b√¨nh
            values = [self.period_data[p][data_key] for p in self.periods_list]
            avg_growth = ((values[-1] / values[0]) ** (1/(len(values)-1)) - 1) * 100
            ws.cell(row=row, column=3).value = avg_growth
            ws.cell(row=row, column=3).number_format = '0.00%'
            
            # D·ª± b√°o c∆° s·ªü (c√¥ng th·ª©c Excel)
            forecast_formula = f"=B{row}*(1+C{row})"
            ws.cell(row=row, column=4).value = forecast_formula
            ws.cell(row=row, column=4).number_format = '#,##0'
            
            # K·ªãch b·∫£n l·∫°c quan (+20% growth)
            optimistic_formula = f"=B{row}*(1+C{row}*1.2)"
            ws.cell(row=row, column=5).value = optimistic_formula
            ws.cell(row=row, column=5).number_format = '#,##0'
            ws.cell(row=row, column=5).fill = self.fill_trend_up
            
            # K·ªãch b·∫£n th·∫≠n tr·ªçng (-20% growth)
            conservative_formula = f"=B{row}*(1+C{row}*0.8)"
            ws.cell(row=row, column=6).value = conservative_formula
            ws.cell(row=row, column=6).number_format = '#,##0'
            ws.cell(row=row, column=6).fill = self.fill_previous
            
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        ws.column_dimensions['A'].width = 25
        for i in range(2, 7):
            ws.column_dimensions[chr(64 + i)].width = 18
            
        print("‚úÖ Ho√†n th√†nh sheet D·ª± b√°o")
        
    def create_named_range(self, name, cell_range):
        """T·∫°o named range trong workbook"""
        try:
            defined_name = DefinedName(name, attr_text=cell_range)
            if hasattr(self.wb, 'defined_names'):
                self.wb.defined_names[name] = defined_name
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói t·∫°o named range {name}: {e}")
            
    def evaluate_trend(self, ratio_name, values):
        """ƒê√°nh gi√° xu h∆∞·ªõng ch·ªâ s·ªë"""
        if len(values) < 2:
            return "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"
            
        trend = values[-1] - values[0]
        
        if ratio_name in ['Current Ratio', 'ROA (%)', 'ROE (%)', 'Asset Turnover']:
            # C√°c ch·ªâ s·ªë c√†ng cao c√†ng t·ªët
            if trend > 0:
                return "C·∫£i thi·ªán t√≠ch c·ª±c"
            elif trend < 0:
                return "C·∫ßn ch√∫ √Ω"
            else:
                return "·ªîn ƒë·ªãnh"
        else:
            return "Bi·∫øn ƒë·ªông"
            
    def save_workbook(self, filename=None):
        """L∆∞u workbook"""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"phan_tich_nhieu_ky_{timestamp}.xlsx"
            
        try:
            self.wb.save(filename)
            print(f"‚úÖ ƒê√£ l∆∞u file: {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file: {e}")
            return None
            
    def generate_complete_analysis(self):
        """T·∫°o ho√†n ch·ªânh h·ªá th·ªëng ph√¢n t√≠ch nhi·ªÅu k·ª≥"""
        print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o h·ªá th·ªëng ph√¢n t√≠ch nhi·ªÅu k·ª≥...")
        
        # T·∫°o workbook
        self.create_multi_period_workbook()
        
        # L∆∞u file
        filename = self.save_workbook()
        
        if filename:
            print(f"\nüéâ HO√ÄN TH√ÄNH H·ªÜ TH·ªêNG PH√ÇN T√çCH NHI·ªÄU K·ª≤!")
            print(f"üìÅ File: {filename}")
            print(f"üìä Sheets: {len(self.sheets)}")
            print(f"üìà Periods: {len(self.periods_list)}")
            
            print("\nüìã C√°c sheet ƒë√£ t·∫°o:")
            for name, sheet in self.sheets.items():
                print(f"   ‚úì {sheet.title}")
                
            print("\nüîç T√≠nh nƒÉng ch√≠nh:")
            print(f"   ‚úì So s√°nh {len(self.periods_list)} k·ª≥ b√°o c√°o")
            print(f"   ‚úì Ph√¢n t√≠ch xu h∆∞·ªõng tƒÉng tr∆∞·ªüng")
            print(f"   ‚úì D·ª± b√°o t√†i ch√≠nh t·ª± ƒë·ªông")
            print(f"   ‚úì C√¥ng th·ª©c Excel ƒë·ªông cho t·∫•t c·∫£ t√≠nh to√°n")
                    
        return filename

# Test v√† ch·∫°y
if __name__ == "__main__":
    analyzer = MultiPeriodAnalyzer(periods=3)
    filename = analyzer.generate_complete_analysis()
    
    if filename:
        print(f"\nüí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
        print(f"1. Thay ƒë·ªïi d·ªØ li·ªáu trong sheet 'B·∫£ng C√¢n ƒê·ªëi Nhi·ªÅu K·ª≥'")
        print(f"2. T·∫•t c·∫£ b√°o c√°o kh√°c s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t")
        print(f"3. Xem xu h∆∞·ªõng ph√°t tri·ªÉn qua c√°c k·ª≥")
        print(f"4. S·ª≠ d·ª•ng d·ª± b√°o ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh")