"""
Dynamic Financial Analyzer - H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông
=============================================================

T·∫°o c√°c b√°o c√°o ph√¢n t√≠ch t√†i ch√≠nh v·ªõi c√¥ng th·ª©c Excel ƒë·ªông 
tham chi·∫øu tr·ª±c ti·∫øp t·ª´ b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n

T√°c gi·∫£: H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông
Chu·∫©n: VAS/Circular 200/2014/TT-BTC
"""

import openpyxl
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.chart import BarChart, PieChart, Reference
from openpyxl.workbook.defined_name import DefinedName
import datetime
import json
import os

class DynamicFinancialAnalyzer:
    def __init__(self, balance_sheet_file=None):
        self.balance_sheet_file = balance_sheet_file
        self.wb = None
        self.sheets = {}
        
        # Thi·∫øt l·∫≠p style
        self.setup_styles()
        
        # ƒê·ªãnh nghƒ©a c√°c c√¥ng th·ª©c ƒë·ªông
        self.setup_dynamic_formulas()
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p c√°c style Excel chuy√™n nghi·ªáp"""
        self.font_header = Font(name='Times New Roman', size=14, bold=True, color='FFFFFF')
        self.font_title = Font(name='Times New Roman', size=12, bold=True)
        self.font_normal = Font(name='Times New Roman', size=11)
        self.font_bold = Font(name='Times New Roman', size=11, bold=True)
        self.font_ratio = Font(name='Times New Roman', size=11, bold=True, color='2F5597')
        
        # M√†u s·∫Øc theo chu·∫©n t√†i ch√≠nh
        self.fill_header = PatternFill(start_color='2F5597', end_color='2F5597', fill_type='solid')
        self.fill_section = PatternFill(start_color='D9E2F3', end_color='D9E2F3', fill_type='solid')
        self.fill_good = PatternFill(start_color='C6EFCE', end_color='C6EFCE', fill_type='solid')
        self.fill_warning = PatternFill(start_color='FFEB9C', end_color='FFEB9C', fill_type='solid')
        self.fill_danger = PatternFill(start_color='FFC7CE', end_color='FFC7CE', fill_type='solid')
        
        # Border
        self.border_thin = Border(
            left=Side(style='thin'), right=Side(style='thin'),
            top=Side(style='thin'), bottom=Side(style='thin')
        )
        
    def setup_dynamic_formulas(self):
        """Thi·∫øt l·∫≠p c√°c c√¥ng th·ª©c Excel ƒë·ªông"""
        self.formulas = {
            # Ch·ªâ s·ªë thanh kho·∫£n
            'current_ratio': "=CurrentAssets/CurrentLiabilities",
            'quick_ratio': "=(CurrentAssets-Inventory)/CurrentLiabilities", 
            'cash_ratio': "=CashAndEquivalents/CurrentLiabilities",
            
            # Ch·ªâ s·ªë sinh l·ªùi
            'roa': "=NetIncome/TotalAssets*100",
            'roe': "=NetIncome/TotalEquity*100", 
            'gross_profit_margin': "=GrossProfit/Revenue*100",
            'net_profit_margin': "=NetIncome/Revenue*100",
            
            # Ch·ªâ s·ªë hi·ªáu qu·∫£
            'asset_turnover': "=Revenue/TotalAssets",
            'inventory_turnover': "=CostOfGoodsSold/Inventory",
            'receivables_turnover': "=Revenue/AccountsReceivable",
            
            # Ch·ªâ s·ªë c∆° c·∫•u t√†i ch√≠nh
            'debt_to_assets': "=TotalLiabilities/TotalAssets",
            'debt_to_equity': "=TotalLiabilities/TotalEquity", 
            'equity_ratio': "=TotalEquity/TotalAssets",
            'financial_leverage': "=TotalAssets/TotalEquity"
        }
        
        # Ti√™u ch√≠ ƒë√°nh gi√°
        self.evaluation_criteria = {
            'current_ratio': {'good': 2.0, 'warning': 1.5, 'unit': ''},
            'quick_ratio': {'good': 1.0, 'warning': 0.8, 'unit': ''},
            'cash_ratio': {'good': 0.2, 'warning': 0.1, 'unit': ''},
            'roa': {'good': 5.0, 'warning': 3.0, 'unit': '%'},
            'roe': {'good': 15.0, 'warning': 10.0, 'unit': '%'},
            'gross_profit_margin': {'good': 30.0, 'warning': 20.0, 'unit': '%'},
            'net_profit_margin': {'good': 10.0, 'warning': 5.0, 'unit': '%'},
            'asset_turnover': {'good': 1.0, 'warning': 0.7, 'unit': ''},
            'inventory_turnover': {'good': 6.0, 'warning': 4.0, 'unit': ''},
            'receivables_turnover': {'good': 8.0, 'warning': 5.0, 'unit': ''},
            'debt_to_assets': {'good': 0.4, 'warning': 0.6, 'unit': '', 'reverse': True},
            'debt_to_equity': {'good': 0.5, 'warning': 1.0, 'unit': '', 'reverse': True},
            'equity_ratio': {'good': 0.5, 'warning': 0.3, 'unit': ''},
        }
        
    def create_analysis_workbook(self):
        """T·∫°o workbook ph√¢n t√≠ch t√†i ch√≠nh"""
        print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh ƒë·ªông...")
        
        self.wb = openpyxl.Workbook()
        
        # T·∫°o c√°c sheet
        self.create_overview_sheet()
        self.create_liquidity_analysis_sheet()
        self.create_profitability_analysis_sheet()
        self.create_efficiency_analysis_sheet()
        self.create_financial_structure_sheet()
        self.create_dashboard_sheet()
        
        print("‚úÖ Ho√†n th√†nh t·∫°o workbook ph√¢n t√≠ch t√†i ch√≠nh")
        
    def create_overview_sheet(self):
        """T·∫°o sheet t·ªïng quan"""
        print("üìä ƒêang t·∫°o sheet T·ªïng quan...")
        
        ws = self.wb.active
        ws.title = "T·ªïng Quan Ph√¢n T√≠ch"
        self.sheets['overview'] = ws
        
        # Header
        ws.merge_cells('A1:F1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH T√ÄI CH√çNH ƒê·ªòNG - T·ªîNG QUAN"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # Th√¥ng tin
        ws.merge_cells('A2:F2')
        cell = ws['A2']
        cell.value = f"Ng√†y ph√¢n t√≠ch: {datetime.date.today().strftime('%d/%m/%Y')}"
        cell.font = self.font_title
        cell.alignment = Alignment(horizontal='center')
        
        # B·∫£ng t√≥m t·∫Øt c√°c ch·ªâ s·ªë ch√≠nh
        row = 4
        ws.merge_cells(f'A{row}:F{row}')
        cell = ws[f'A{row}']
        cell.value = "C√ÅC CH·ªà S·ªê T√ÄI CH√çNH CH√çNH"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # Header b·∫£ng
        headers = ['Nh√≥m ch·ªâ s·ªë', 'Ch·ªâ s·ªë', 'C√¥ng th·ª©c Excel', 'Gi√° tr·ªã', 'ƒê√°nh gi√°', '√ù nghƒ©a']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
            
        row += 1
        
        # D·ªØ li·ªáu ch·ªâ s·ªë
        key_ratios = [
            ('Thanh kho·∫£n', 'H·ªá s·ªë thanh to√°n hi·ªán h√†nh', 'current_ratio', 'Kh·∫£ nƒÉng thanh to√°n ng·∫Øn h·∫°n'),
            ('Thanh kho·∫£n', 'H·ªá s·ªë thanh to√°n nhanh', 'quick_ratio', 'Kh·∫£ nƒÉng thanh to√°n t·ª©c th·ªùi'),
            ('Sinh l·ªùi', 'ROA (%)', 'roa', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n'),
            ('Sinh l·ªùi', 'ROE (%)', 'roe', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng v·ªën ch·ªß s·ªü h·ªØu'),
            ('Sinh l·ªùi', 'T·ª∑ su·∫•t l·ª£i nhu·∫≠n (%)', 'net_profit_margin', 'Hi·ªáu qu·∫£ kinh doanh'),
            ('Hi·ªáu qu·∫£', 'V√≤ng quay t√†i s·∫£n', 'asset_turnover', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n'),
            ('C∆° c·∫•u', 'H·ªá s·ªë n·ª£ tr√™n t√†i s·∫£n', 'debt_to_assets', 'M·ª©c ƒë·ªô s·ª≠ d·ª•ng n·ª£'),
            ('C∆° c·∫•u', 'H·ªá s·ªë n·ª£ tr√™n v·ªën', 'debt_to_equity', 'ƒê√≤n b·∫©y t√†i ch√≠nh')
        ]
        
        for group, name, formula_key, meaning in key_ratios:
            ws[f'A{row}'] = group
            ws[f'B{row}'] = name
            ws[f'C{row}'] = self.formulas[formula_key]
            ws[f'D{row}'] = self.formulas[formula_key]  # C√¥ng th·ª©c s·∫Ω t√≠nh to√°n
            ws[f'E{row}'] = self.create_evaluation_formula(formula_key)
            ws[f'F{row}'] = meaning
            
            # ƒê·ªãnh d·∫°ng
            for col in range(1, 7):
                cell = ws.cell(row=row, column=col)
                cell.border = self.border_thin
                if col == 4:  # C·ªôt gi√° tr·ªã
                    cell.font = self.font_ratio
                    
            row += 1
            
        # Ch√∫ th√≠ch ƒë√°nh gi√°
        row += 2
        ws[f'A{row}'] = "CH√ö TH√çCH ƒê√ÅNH GI√Å:"
        ws[f'A{row}'].font = self.font_bold
        row += 1
        
        ws[f'A{row}'] = "T·ªët"
        ws[f'A{row}'].fill = self.fill_good
        ws[f'B{row}'] = "Ch·ªâ s·ªë ƒë·∫°t ti√™u chu·∫©n t·ªët"
        row += 1
        
        ws[f'A{row}'] = "C·∫£nh b√°o"
        ws[f'A{row}'].fill = self.fill_warning
        ws[f'B{row}'] = "Ch·ªâ s·ªë c·∫ßn ch√∫ √Ω, c√≥ th·ªÉ c·∫£i thi·ªán"
        row += 1
        
        ws[f'A{row}'] = "Y·∫øu"
        ws[f'A{row}'].fill = self.fill_danger
        ws[f'B{row}'] = "Ch·ªâ s·ªë th·∫•p, c·∫ßn c·∫£i thi·ªán ngay"
        
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_columns(ws, [25, 25, 20, 15, 15, 30])
        
        print("‚úÖ Ho√†n th√†nh sheet T·ªïng quan")
        
    def create_liquidity_analysis_sheet(self):
        """T·∫°o sheet ph√¢n t√≠ch kh·∫£ nƒÉng thanh to√°n"""
        print("üíß ƒêang t·∫°o sheet Ph√¢n t√≠ch Thanh kho·∫£n...")
        
        ws = self.wb.create_sheet("Ph√¢n T√≠ch Thanh Kho·∫£n")
        self.sheets['liquidity'] = ws
        
        # Header
        ws.merge_cells('A1:E1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH KH·∫¢ NƒÇNG THANH TO√ÅN"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        row = 3
        
        # 1. C√°c ch·ªâ s·ªë thanh kho·∫£n
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "1. C√ÅC CH·ªà S·ªê THANH KHO·∫¢N"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # Header b·∫£ng
        headers = ['Ch·ªâ s·ªë', 'C√¥ng th·ª©c', 'Gi√° tr·ªã', 'ƒê√°nh gi√°', '√ù nghƒ©a']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        # D·ªØ li·ªáu thanh kho·∫£n
        liquidity_ratios = [
            ('H·ªá s·ªë thanh to√°n hi·ªán h√†nh', 'current_ratio', 'ƒêo l∆∞·ªùng kh·∫£ nƒÉng thanh to√°n n·ª£ ng·∫Øn h·∫°n'),
            ('H·ªá s·ªë thanh to√°n nhanh', 'quick_ratio', 'ƒêo l∆∞·ªùng kh·∫£ nƒÉng thanh to√°n t·ª©c th·ªùi'),
            ('H·ªá s·ªë thanh to√°n b·∫±ng ti·ªÅn', 'cash_ratio', 'ƒêo l∆∞·ªùng kh·∫£ nƒÉng thanh to√°n b·∫±ng ti·ªÅn m·∫∑t')
        ]
        
        for name, formula_key, meaning in liquidity_ratios:
            ws[f'A{row}'] = name
            ws[f'B{row}'] = self.formulas[formula_key]
            ws[f'C{row}'] = self.formulas[formula_key]
            ws[f'D{row}'] = self.create_evaluation_formula(formula_key)
            ws[f'E{row}'] = meaning
            
            # ƒê·ªãnh d·∫°ng ƒë√°nh gi√° c√≥ ƒëi·ªÅu ki·ªán
            eval_cell = ws[f'D{row}']
            self.apply_conditional_formatting(eval_cell, formula_key)
            
            row += 1
            
        # 2. Ph√¢n t√≠ch chi ti·∫øt
        row += 2
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "2. PH√ÇN T√çCH CHI TI·∫æT"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # B·∫£ng ph√¢n t√≠ch t√†i s·∫£n ng·∫Øn h·∫°n
        ws[f'A{row}'] = "C∆° c·∫•u t√†i s·∫£n ng·∫Øn h·∫°n:"
        ws[f'A{row}'].font = self.font_bold
        row += 1
        
        current_assets_breakdown = [
            ('Ti·ªÅn v√† t∆∞∆°ng ƒë∆∞∆°ng ti·ªÅn', '=CashAndEquivalents', '=CashAndEquivalents/CurrentAssets*100'),
            ('ƒê·∫ßu t∆∞ ng·∫Øn h·∫°n', '=ShortTermInvestments', '=ShortTermInvestments/CurrentAssets*100'),
            ('Ph·∫£i thu kh√°ch h√†ng', '=AccountsReceivable', '=AccountsReceivable/CurrentAssets*100'),
            ('H√†ng t·ªìn kho', '=Inventory', '=Inventory/CurrentAssets*100'),
            ('Kh√°c', '=PrepaidExpenses+OtherCurrentAssets', '=(PrepaidExpenses+OtherCurrentAssets)/CurrentAssets*100')
        ]
        
        headers = ['Kho·∫£n m·ª•c', 'Gi√° tr·ªã (VND)', 'T·ª∑ tr·ªçng (%)']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        for item, value_formula, percent_formula in current_assets_breakdown:
            ws[f'A{row}'] = item
            ws[f'B{row}'] = value_formula
            ws[f'C{row}'] = percent_formula
            row += 1
            
        # 3. Khuy·∫øn ngh·ªã
        row += 2
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "3. KHUY·∫æN NGH·ªä C·∫¢I THI·ªÜN"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        recommendations = [
            "‚Ä¢ Current Ratio > 2.0: Kh·∫£ nƒÉng thanh to√°n t·ªët",
            "‚Ä¢ Current Ratio 1.5-2.0: M·ª©c ƒë·ªô ch·∫•p nh·∫≠n ƒë∆∞·ª£c, c·∫ßn theo d√µi",
            "‚Ä¢ Current Ratio < 1.5: C·∫ßn c·∫£i thi·ªán thanh kho·∫£n ngay",
            "‚Ä¢ Quick Ratio > 1.0: Thanh to√°n t·ª©c th·ªùi t·ªët",
            "‚Ä¢ C√¢n b·∫±ng gi·ªØa t√≠nh thanh kho·∫£n v√† hi·ªáu qu·∫£ ƒë·∫ßu t∆∞",
            "‚Ä¢ Qu·∫£n l√Ω h√†ng t·ªìn kho hi·ªáu qu·∫£ ƒë·ªÉ tƒÉng thanh kho·∫£n"
        ]
        
        for recommendation in recommendations:
            ws[f'A{row}'] = recommendation
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_columns(ws, [30, 25, 15, 15, 40])
        
        print("‚úÖ Ho√†n th√†nh sheet Ph√¢n t√≠ch Thanh kho·∫£n")
        
    def create_profitability_analysis_sheet(self):
        """T·∫°o sheet ph√¢n t√≠ch kh·∫£ nƒÉng sinh l·ªùi"""
        print("üí∞ ƒêang t·∫°o sheet Ph√¢n t√≠ch Sinh l·ªùi...")
        
        ws = self.wb.create_sheet("Ph√¢n T√≠ch Sinh L·ªùi")
        self.sheets['profitability'] = ws
        
        # Header
        ws.merge_cells('A1:E1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH KH·∫¢ NƒÇNG SINH L·ªúI"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        row = 3
        
        # 1. C√°c ch·ªâ s·ªë sinh l·ªùi
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "1. C√ÅC CH·ªà S·ªê SINH L·ªúI"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # Header b·∫£ng
        headers = ['Ch·ªâ s·ªë', 'C√¥ng th·ª©c', 'Gi√° tr·ªã (%)', 'ƒê√°nh gi√°', '√ù nghƒ©a']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        # D·ªØ li·ªáu sinh l·ªùi
        profitability_ratios = [
            ('ROA (Return on Assets)', 'roa', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n ƒë·ªÉ t·∫°o l·ª£i nhu·∫≠n'),
            ('ROE (Return on Equity)', 'roe', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng v·ªën ch·ªß s·ªü h·ªØu'),
            ('T·ª∑ su·∫•t l·ª£i nhu·∫≠n g·ªôp', 'gross_profit_margin', 'Hi·ªáu qu·∫£ ki·ªÉm so√°t gi√° v·ªën'),
            ('T·ª∑ su·∫•t l·ª£i nhu·∫≠n r√≤ng', 'net_profit_margin', 'Hi·ªáu qu·∫£ t·ªïng th·ªÉ c·ªßa doanh nghi·ªáp')
        ]
        
        for name, formula_key, meaning in profitability_ratios:
            ws[f'A{row}'] = name
            ws[f'B{row}'] = self.formulas[formula_key]
            ws[f'C{row}'] = self.formulas[formula_key]
            ws[f'D{row}'] = self.create_evaluation_formula(formula_key)
            ws[f'E{row}'] = meaning
            
            # ƒê·ªãnh d·∫°ng
            eval_cell = ws[f'D{row}']
            self.apply_conditional_formatting(eval_cell, formula_key)
            
            row += 1
            
        # 2. Ph√¢n t√≠ch c∆° c·∫•u l·ª£i nhu·∫≠n
        row += 2
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "2. PH√ÇN T√çCH C∆† C·∫§U L·ª¢I NHU·∫¨N"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        profit_structure = [
            ('Doanh thu thu·∫ßn', '=Revenue', '100%'),
            ('Gi√° v·ªën h√†ng b√°n', '=CostOfGoodsSold', '=CostOfGoodsSold/Revenue*100'),
            ('L·ª£i nhu·∫≠n g·ªôp', '=GrossProfit', '=GrossProfit/Revenue*100'),
            ('Chi ph√≠ b√°n h√†ng & qu·∫£n l√Ω', '=OperatingExpenses', '=OperatingExpenses/Revenue*100'),
            ('L·ª£i nhu·∫≠n t·ª´ HƒêKD', '=OperatingIncome', '=OperatingIncome/Revenue*100'),
            ('L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø', '=PreTaxIncome', '=PreTaxIncome/Revenue*100'),
            ('L·ª£i nhu·∫≠n sau thu·∫ø', '=NetIncome', '=NetIncome/Revenue*100')
        ]
        
        headers = ['Kho·∫£n m·ª•c', 'Gi√° tr·ªã (VND)', 'T·ª∑ tr·ªçng (%)']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        for item, value_formula, percent_formula in profit_structure:
            ws[f'A{row}'] = item
            ws[f'B{row}'] = value_formula
            ws[f'C{row}'] = percent_formula
            row += 1
            
        # 3. So s√°nh v·ªõi ti√™u chu·∫©n ng√†nh
        row += 2
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "3. TI√äU CHU·∫®N ƒê√ÅNH GI√Å"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        benchmarks = [
            "‚Ä¢ ROA > 5%: Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n t·ªët",
            "‚Ä¢ ROE > 15%: Sinh l·ªùi v·ªën ch·ªß s·ªü h·ªØu t·ªët",
            "‚Ä¢ Gross Margin > 30%: Ki·ªÉm so√°t gi√° v·ªën hi·ªáu qu·∫£",
            "‚Ä¢ Net Margin > 10%: Hi·ªáu qu·∫£ kinh doanh t·ªïng th·ªÉ t·ªët",
            "‚Ä¢ ROE > ROA: S·ª≠ d·ª•ng ƒë√≤n b·∫©y t√†i ch√≠nh hi·ªáu qu·∫£"
        ]
        
        for benchmark in benchmarks:
            ws[f'A{row}'] = benchmark
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_columns(ws, [30, 25, 15, 15, 40])
        
        print("‚úÖ Ho√†n th√†nh sheet Ph√¢n t√≠ch Sinh l·ªùi")
        
    def create_efficiency_analysis_sheet(self):
        """T·∫°o sheet ph√¢n t√≠ch hi·ªáu qu·∫£ ho·∫°t ƒë·ªông"""
        print("‚ö° ƒêang t·∫°o sheet Ph√¢n t√≠ch Hi·ªáu qu·∫£...")
        
        ws = self.wb.create_sheet("Ph√¢n T√≠ch Hi·ªáu Qu·∫£")
        self.sheets['efficiency'] = ws
        
        # Header
        ws.merge_cells('A1:E1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH HI·ªÜU QU·∫¢ HO·∫†T ƒê·ªòNG"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        row = 3
        
        # 1. C√°c ch·ªâ s·ªë hi·ªáu qu·∫£
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "1. C√ÅC CH·ªà S·ªê HI·ªÜU QU·∫¢ HO·∫†T ƒê·ªòNG"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # Header b·∫£ng
        headers = ['Ch·ªâ s·ªë', 'C√¥ng th·ª©c', 'Gi√° tr·ªã', 'ƒê√°nh gi√°', '√ù nghƒ©a']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        # D·ªØ li·ªáu hi·ªáu qu·∫£
        efficiency_ratios = [
            ('V√≤ng quay t√†i s·∫£n', 'asset_turnover', 'Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n t·∫°o doanh thu'),
            ('V√≤ng quay h√†ng t·ªìn kho', 'inventory_turnover', 'T·ªëc ƒë·ªô ti√™u th·ª• h√†ng t·ªìn kho'),
            ('V√≤ng quay ph·∫£i thu', 'receivables_turnover', 'Hi·ªáu qu·∫£ thu h·ªìi c√¥ng n·ª£')
        ]
        
        for name, formula_key, meaning in efficiency_ratios:
            ws[f'A{row}'] = name
            ws[f'B{row}'] = self.formulas[formula_key]
            ws[f'C{row}'] = self.formulas[formula_key]
            ws[f'D{row}'] = self.create_evaluation_formula(formula_key)
            ws[f'E{row}'] = meaning
            
            # ƒê·ªãnh d·∫°ng
            eval_cell = ws[f'D{row}']
            self.apply_conditional_formatting(eval_cell, formula_key)
            
            row += 1
            
        # 2. Ph√¢n t√≠ch chu k·ª≥ kinh doanh
        row += 2
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "2. PH√ÇN T√çCH CHU K·ª≤ KINH DOANH"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        ws[f'A{row}'] = "Chu k·ª≥ kinh doanh (ng√†y):"
        ws[f'A{row}'].font = self.font_bold
        row += 1
        
        business_cycle = [
            ('Chu k·ª≥ h√†ng t·ªìn kho', '=365/InventoryTurnover', 'S·ªë ng√†y trung b√¨nh ƒë·ªÉ b√°n h·∫øt h√†ng t·ªìn'),
            ('Chu k·ª≥ thu ti·ªÅn', '=365/ReceivablesTurnover', 'S·ªë ng√†y trung b√¨nh ƒë·ªÉ thu h·ªìi c√¥ng n·ª£'),
            ('Chu k·ª≥ tr·∫£ ti·ªÅn', '=365/(CostOfGoodsSold/AccountsPayable)', 'S·ªë ng√†y trung b√¨nh ƒë·ªÉ tr·∫£ ti·ªÅn nh√† cung c·∫•p'),
            ('Chu k·ª≥ ti·ªÅn m·∫∑t', '=(365/InventoryTurnover)+(365/ReceivablesTurnover)-(365/(CostOfGoodsSold/AccountsPayable))', 'Chu k·ª≥ chuy·ªÉn ƒë·ªïi ti·ªÅn m·∫∑t')
        ]
        
        headers = ['Ch·ªâ s·ªë', 'C√¥ng th·ª©c', '√ù nghƒ©a']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        for name, formula, meaning in business_cycle:
            ws[f'A{row}'] = name
            ws[f'B{row}'] = formula
            ws[f'C{row}'] = meaning
            row += 1
            
        # 3. Khuy·∫øn ngh·ªã c·∫£i thi·ªán
        row += 2
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "3. KHUY·∫æN NGH·ªä C·∫¢I THI·ªÜN HI·ªÜU QU·∫¢"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        recommendations = [
            "‚Ä¢ Asset Turnover > 1.0: S·ª≠ d·ª•ng t√†i s·∫£n hi·ªáu qu·∫£",
            "‚Ä¢ Inventory Turnover > 6: Qu·∫£n l√Ω h√†ng t·ªìn kho t·ªët",
            "‚Ä¢ Receivables Turnover > 8: Thu h·ªìi c√¥ng n·ª£ hi·ªáu qu·∫£",
            "‚Ä¢ R√∫t ng·∫Øn chu k·ª≥ kinh doanh ƒë·ªÉ c·∫£i thi·ªán d√≤ng ti·ªÅn",
            "‚Ä¢ T·ªëi ∆∞u h√≥a quy tr√¨nh qu·∫£n l√Ω h√†ng t·ªìn kho",
            "‚Ä¢ C·∫£i thi·ªán ch√≠nh s√°ch t√≠n d·ª•ng v√† thu h·ªìi c√¥ng n·ª£"
        ]
        
        for recommendation in recommendations:
            ws[f'A{row}'] = recommendation
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_columns(ws, [30, 30, 40])
        
        print("‚úÖ Ho√†n th√†nh sheet Ph√¢n t√≠ch Hi·ªáu qu·∫£")
        
    def create_financial_structure_sheet(self):
        """T·∫°o sheet ph√¢n t√≠ch c∆° c·∫•u t√†i ch√≠nh"""
        print("üèóÔ∏è  ƒêang t·∫°o sheet Ph√¢n t√≠ch C∆° c·∫•u t√†i ch√≠nh...")
        
        ws = self.wb.create_sheet("Ph√¢n T√≠ch C∆° C·∫•u T√†i Ch√≠nh")
        self.sheets['structure'] = ws
        
        # Header
        ws.merge_cells('A1:E1')
        cell = ws['A1']
        cell.value = "PH√ÇN T√çCH C∆† C·∫§U T√ÄI CH√çNH"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        row = 3
        
        # 1. C√°c ch·ªâ s·ªë c∆° c·∫•u
        ws.merge_cells(f'A{row}:E{row}')
        cell = ws[f'A{row}']
        cell.value = "1. C√ÅC CH·ªà S·ªê C∆† C·∫§U T√ÄI CH√çNH"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # Header b·∫£ng
        headers = ['Ch·ªâ s·ªë', 'C√¥ng th·ª©c', 'Gi√° tr·ªã', 'ƒê√°nh gi√°', '√ù nghƒ©a']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        # D·ªØ li·ªáu c∆° c·∫•u
        structure_ratios = [
            ('H·ªá s·ªë n·ª£ tr√™n t√†i s·∫£n', 'debt_to_assets', 'M·ª©c ƒë·ªô s·ª≠ d·ª•ng n·ª£ ƒë·ªÉ t√†i tr·ª£ t√†i s·∫£n'),
            ('H·ªá s·ªë n·ª£ tr√™n v·ªën', 'debt_to_equity', 'ƒê√≤n b·∫©y t√†i ch√≠nh'),
            ('H·ªá s·ªë v·ªën ch·ªß s·ªü h·ªØu', 'equity_ratio', 'M·ª©c ƒë·ªô t·ª± t√†i tr·ª£'),
            ('H·ªá s·ªë ƒë√≤n b·∫©y t√†i ch√≠nh', 'financial_leverage', 'M·ª©c ƒë·ªô s·ª≠ d·ª•ng ƒë√≤n b·∫©y')
        ]
        
        for name, formula_key, meaning in structure_ratios:
            ws[f'A{row}'] = name
            ws[f'B{row}'] = self.formulas[formula_key]
            ws[f'C{row}'] = self.formulas[formula_key]
            ws[f'D{row}'] = self.create_evaluation_formula(formula_key)
            ws[f'E{row}'] = meaning
            
            # ƒê·ªãnh d·∫°ng
            eval_cell = ws[f'D{row}']
            self.apply_conditional_formatting(eval_cell, formula_key)
            
            row += 1
            
        # 2. C∆° c·∫•u ngu·ªìn v·ªën
        row += 2
        ws.merge_cells(f'A{row}:D{row}')
        cell = ws[f'A{row}']
        cell.value = "2. C∆† C·∫§U NGU·ªíN V·ªêN"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        capital_structure = [
            ('N·ª£ ng·∫Øn h·∫°n', '=CurrentLiabilities', '=CurrentLiabilities/TotalLiabilitiesAndEquity*100'),
            ('N·ª£ d√†i h·∫°n', '=NonCurrentLiabilities', '=NonCurrentLiabilities/TotalLiabilitiesAndEquity*100'),
            ('V·ªën ch·ªß s·ªü h·ªØu', '=TotalEquity', '=TotalEquity/TotalLiabilitiesAndEquity*100')
        ]
        
        headers = ['Ngu·ªìn v·ªën', 'Gi√° tr·ªã (VND)', 'T·ª∑ tr·ªçng (%)']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        for item, value_formula, percent_formula in capital_structure:
            ws[f'A{row}'] = item
            ws[f'B{row}'] = value_formula
            ws[f'C{row}'] = percent_formula
            row += 1
            
        # 3. C∆° c·∫•u t√†i s·∫£n
        row += 2
        ws.merge_cells(f'A{row}:D{row}')
        cell = ws[f'A{row}']
        cell.value = "3. C∆† C·∫§U T√ÄI S·∫¢N"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        asset_structure = [
            ('T√†i s·∫£n ng·∫Øn h·∫°n', '=CurrentAssets', '=CurrentAssets/TotalAssets*100'),
            ('T√†i s·∫£n d√†i h·∫°n', '=NonCurrentAssets', '=NonCurrentAssets/TotalAssets*100')
        ]
        
        headers = ['Lo·∫°i t√†i s·∫£n', 'Gi√° tr·ªã (VND)', 'T·ª∑ tr·ªçng (%)']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        for item, value_formula, percent_formula in asset_structure:
            ws[f'A{row}'] = item
            ws[f'B{row}'] = value_formula
            ws[f'C{row}'] = percent_formula
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_columns(ws, [30, 25, 15, 15, 40])
        
        print("‚úÖ Ho√†n th√†nh sheet Ph√¢n t√≠ch C∆° c·∫•u t√†i ch√≠nh")
        
    def create_dashboard_sheet(self):
        """T·∫°o dashboard t·ªïng h·ª£p"""
        print("üìà ƒêang t·∫°o Dashboard...")
        
        ws = self.wb.create_sheet("Dashboard")
        self.sheets['dashboard'] = ws
        
        # Header
        ws.merge_cells('A1:H1')
        cell = ws['A1']
        cell.value = "DASHBOARD PH√ÇN T√çCH T√ÄI CH√çNH ƒê·ªòNG"
        cell.font = self.font_header
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.fill = self.fill_header
        
        # B·∫£ng ƒëi·ªÉm s·ªë t·ªïng h·ª£p
        row = 3
        ws.merge_cells(f'A{row}:H{row}')
        cell = ws[f'A{row}']
        cell.value = "B·∫¢NG ƒêI·ªÇM T·ªîNG H·ª¢P"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        # Score card v·ªõi c√°c ch·ªâ s·ªë ch√≠nh
        scorecard = [
            ('Thanh kho·∫£n', 'current_ratio', 'T·ªët: >2.0, TB: 1.5-2.0, Y·∫øu: <1.5'),
            ('Sinh l·ªùi', 'roe', 'T·ªët: >15%, TB: 10-15%, Y·∫øu: <10%'),
            ('Hi·ªáu qu·∫£', 'asset_turnover', 'T·ªët: >1.0, TB: 0.7-1.0, Y·∫øu: <0.7'),
            ('An to√†n', 'debt_to_assets', 'T·ªët: <40%, TB: 40-60%, R·ªßi ro: >60%')
        ]
        
        headers = ['Nh√≥m', 'Gi√° tr·ªã', 'ƒê√°nh gi√°', 'Ti√™u chu·∫©n']
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=row, column=col)
            cell.value = header
            cell.font = self.font_bold
            cell.fill = self.fill_section
            cell.border = self.border_thin
        row += 1
        
        for group, formula_key, standard in scorecard:
            ws[f'A{row}'] = group
            ws[f'B{row}'] = self.formulas[formula_key]
            ws[f'C{row}'] = self.create_evaluation_formula(formula_key)
            ws[f'D{row}'] = standard
            
            # ƒê·ªãnh d·∫°ng ƒë√°nh gi√°
            eval_cell = ws[f'C{row}']
            self.apply_conditional_formatting(eval_cell, formula_key)
            
            row += 1
            
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        row += 3
        ws.merge_cells(f'A{row}:H{row}')
        cell = ws[f'A{row}']
        cell.value = "H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG H·ªÜ TH·ªêNG ƒê·ªòNG"
        cell.font = self.font_title
        cell.fill = self.fill_section
        row += 1
        
        instructions = [
            "1. T·∫•t c·∫£ c√¥ng th·ª©c ƒë·ªÅu tham chi·∫øu tr·ª±c ti·∫øp t·ª´ B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n",
            "2. Thay ƒë·ªïi d·ªØ li·ªáu trong b·∫£ng c√¢n ƒë·ªëi ‚Üí T·∫•t c·∫£ b√°o c√°o t·ª± ƒë·ªông c·∫≠p nh·∫≠t",
            "3. C√°c named ranges ch√≠nh: TotalAssets, CurrentAssets, CurrentLiabilities, TotalEquity",
            "4. C√¥ng th·ª©c c√≥ th·ªÉ copy/paste sang file Excel kh√°c",
            "5. ƒê√°nh gi√° t·ª± ƒë·ªông d·ª±a tr√™n ti√™u chu·∫©n ng√†nh",
            "6. Backup file tr∆∞·ªõc khi thay ƒë·ªïi d·ªØ li·ªáu"
        ]
        
        for instruction in instructions:
            ws[f'A{row}'] = instruction
            row += 1
            
        # ƒê·ªãnh d·∫°ng c·ªôt
        self.format_columns(ws, [15, 20, 15, 40])
        
        print("‚úÖ Ho√†n th√†nh Dashboard")
        
    def create_evaluation_formula(self, ratio_key):
        """T·∫°o c√¥ng th·ª©c ƒë√°nh gi√° t·ª± ƒë·ªông"""
        criteria = self.evaluation_criteria.get(ratio_key, {})
        good_threshold = criteria.get('good', 0)
        warning_threshold = criteria.get('warning', 0)
        is_reverse = criteria.get('reverse', False)
        
        formula_ref = self.formulas[ratio_key]
        
        if is_reverse:
            # V·ªõi ch·ªâ s·ªë reverse (nh∆∞ debt ratio), c√†ng th·∫•p c√†ng t·ªët
            return f'=IF({formula_ref}<={good_threshold},"T·ªët",IF({formula_ref}<={warning_threshold},"C·∫£nh b√°o","Y·∫øu"))'
        else:
            # V·ªõi ch·ªâ s·ªë th∆∞·ªùng, c√†ng cao c√†ng t·ªët
            return f'=IF({formula_ref}>={good_threshold},"T·ªët",IF({formula_ref}>={warning_threshold},"C·∫£nh b√°o","Y·∫øu"))'
            
    def apply_conditional_formatting(self, cell, ratio_key):
        """√Åp d·ª•ng ƒë·ªãnh d·∫°ng c√≥ ƒëi·ªÅu ki·ªán cho cell"""
        # L∆∞u √Ω: openpyxl kh√¥ng h·ªó tr·ª£ conditional formatting ph·ª©c t·∫°p
        # S·∫Ω s·ª≠ d·ª•ng c√¥ng th·ª©c IF trong Excel ƒë·ªÉ t·ª± ƒë·ªông t√¥ m√†u
        pass
        
    def format_columns(self, ws, widths):
        """ƒê·ªãnh d·∫°ng ƒë·ªô r·ªông c·ªôt"""
        for i, width in enumerate(widths, 1):
            ws.column_dimensions[chr(64 + i)].width = width
            
        # ƒê·ªãnh d·∫°ng s·ªë cho c√°c cell ch·ª©a gi√° tr·ªã
        for row in ws.iter_rows():
            for cell in row:
                if cell.value and str(cell.value).startswith('='):
                    cell.number_format = '#,##0.00'
                    
    def save_workbook(self, filename=None):
        """L∆∞u workbook"""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"phan_tich_tai_chinh_dynamic_{timestamp}.xlsx"
            
        try:
            self.wb.save(filename)
            print(f"‚úÖ ƒê√£ l∆∞u file: {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u file: {e}")
            return None
            
    def generate_complete_analysis(self):
        """T·∫°o ho√†n ch·ªânh h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh ƒë·ªông"""
        print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh ƒë·ªông...")
        
        # T·∫°o workbook
        self.create_analysis_workbook()
        
        # L∆∞u file
        filename = self.save_workbook()
        
        if filename:
            print(f"\nüéâ HO√ÄN TH√ÄNH H·ªÜ TH·ªêNG PH√ÇN T√çCH T√ÄI CH√çNH ƒê·ªòNG!")
            print(f"üìÅ File: {filename}")
            print(f"üìä Sheets: {len(self.sheets)}")
            print(f"üî¢ Formulas: {len(self.formulas)}")
            
            print("\nüìã C√°c sheet ƒë√£ t·∫°o:")
            for name, sheet in self.sheets.items():
                print(f"   ‚úì {sheet.title}")
                
            print("\nüîó C√¥ng th·ª©c ch√≠nh:")
            key_formulas = ['current_ratio', 'roe', 'roa', 'debt_to_assets']
            for formula_key in key_formulas:
                if formula_key in self.formulas:
                    print(f"   ‚úì {formula_key}: {self.formulas[formula_key]}")
                    
        return filename

# Test v√† ch·∫°y
if __name__ == "__main__":
    analyzer = DynamicFinancialAnalyzer()
    filename = analyzer.generate_complete_analysis()
    
    if filename:
        print(f"\nüîç T√≠nh nƒÉng ch√≠nh:")
        print(f"1. T·∫•t c·∫£ c√¥ng th·ª©c Excel tham chi·∫øu ƒë·ªông t·ª´ b·∫£ng c√¢n ƒë·ªëi")
        print(f"2. Thay ƒë·ªïi d·ªØ li·ªáu ‚Üí T·ª± ƒë·ªông c·∫≠p nh·∫≠t to√†n b·ªô b√°o c√°o")
        print(f"3. ƒê√°nh gi√° t·ª± ƒë·ªông d·ª±a tr√™n ti√™u chu·∫©n ng√†nh")
        print(f"4. 5 b√°o c√°o chuy√™n s√¢u + Dashboard t·ªïng h·ª£p")
        print(f"5. Tu√¢n th·ªß chu·∫©n k·∫ø to√°n Vi·ªát Nam VAS")