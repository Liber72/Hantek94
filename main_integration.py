"""
Main Integration System - H·ªá th·ªëng T√≠ch h·ª£p Ch√≠nh
=================================================

ƒêi·ªÅu ph·ªëi to√†n b·ªô h·ªá th·ªëng b√°o c√°o t√†i ch√≠nh ƒë·ªông
T√≠ch h·ª£p t·∫•t c·∫£ c√°c module v√† cung c·∫•p giao di·ªán th√¢n thi·ªán

T√°c gi·∫£: H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông
Chu·∫©n: VAS/Circular 200/2014/TT-BTC
"""

import os
import sys
import datetime
import json
from pathlib import Path

# Import c√°c module ch√≠nh
from enhanced_balance_sheet_generator import EnhancedBalanceSheetGenerator
from dynamic_financial_analyzer import DynamicFinancialAnalyzer
from formula_validator import FormulaValidator
from multi_period_analyzer import MultiPeriodAnalyzer

class MainIntegrationSystem:
    def __init__(self):
        self.system_info = {
            'name': 'H·ªá th·ªëng B√°o c√°o T√†i ch√≠nh ƒê·ªông',
            'version': '1.0.0',
            'author': 'Dynamic Financial Analysis System',
            'standard': 'VAS/Circular 200/2014/TT-BTC',
            'created': datetime.datetime.now().isoformat()
        }
        
        self.generated_files = []
        self.validation_results = []
        
    def print_banner(self):
        """In banner h·ªá th·ªëng"""
        print("=" * 80)
        print("üè¢ H·ªÜ TH·ªêNG B√ÅO C√ÅO T√ÄI CH√çNH ƒê·ªòNG")
        print("üìä Dynamic Financial Reporting System")
        print("=" * 80)
        print(f"üìå Phi√™n b·∫£n: {self.system_info['version']}")
        print(f"üìÖ Chu·∫©n k·∫ø to√°n: {self.system_info['standard']}")
        print(f"üïê Th·ªùi gian: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("=" * 80)
        
    def print_menu(self):
        """In menu ch√≠nh"""
        print("\nüìã MENU CH√çNH:")
        print("1. üèóÔ∏è  T·∫°o B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n v·ªõi Named Ranges")
        print("2. üìä T·∫°o H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh ƒê·ªông")
        print("3. üîç Ki·ªÉm tra v√† Validation C√¥ng th·ª©c")
        print("4. üìà Ph√¢n t√≠ch Nhi·ªÅu k·ª≥ v√† Xu h∆∞·ªõng")
        print("5. üöÄ T·∫°o To√†n b·ªô H·ªá th·ªëng (T·ª± ƒë·ªông)")
        print("6. üìÅ Xem Danh s√°ch File ƒë√£ t·∫°o")
        print("7. üìñ H∆∞·ªõng d·∫´n S·ª≠ d·ª•ng")
        print("8. ‚ùå Tho√°t")
        print("-" * 80)
        
    def create_output_folder(self):
        """T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i"""
        folders = ['output', 'backups', 'reports', 'templates']
        for folder in folders:
            os.makedirs(folder, exist_ok=True)
            
    def option_1_balance_sheet(self):
        """T√πy ch·ªçn 1: T·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n"""
        print("\nüèóÔ∏è  ƒêANG T·∫†O B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN...")
        print("-" * 60)
        
        try:
            generator = EnhancedBalanceSheetGenerator()
            filename = generator.generate_complete_balance_sheet()
            
            if filename:
                self.generated_files.append({
                    'type': 'balance_sheet',
                    'filename': filename,
                    'timestamp': datetime.datetime.now().isoformat(),
                    'named_ranges': len(generator.named_ranges)
                })
                
                print(f"\n‚úÖ TH√ÄNH C√îNG!")
                print(f"üìÅ File ƒë√£ t·∫°o: {filename}")
                print(f"üè∑Ô∏è  Named Ranges: {len(generator.named_ranges)}")
                return filename
            else:
                print("‚ùå L·ªói t·∫°o b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
            
    def option_2_financial_analysis(self):
        """T√πy ch·ªçn 2: T·∫°o h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh"""
        print("\nüìä ƒêANG T·∫†O H·ªÜ TH·ªêNG PH√ÇN T√çCH T√ÄI CH√çNH...")
        print("-" * 60)
        
        try:
            analyzer = DynamicFinancialAnalyzer()
            filename = analyzer.generate_complete_analysis()
            
            if filename:
                self.generated_files.append({
                    'type': 'financial_analysis',
                    'filename': filename,
                    'timestamp': datetime.datetime.now().isoformat(),
                    'sheets': len(analyzer.sheets),
                    'formulas': len(analyzer.formulas)
                })
                
                print(f"\n‚úÖ TH√ÄNH C√îNG!")
                print(f"üìÅ File ƒë√£ t·∫°o: {filename}")
                print(f"üìä Sheets: {len(analyzer.sheets)}")
                print(f"üî¢ Formulas: {len(analyzer.formulas)}")
                return filename
            else:
                print("‚ùå L·ªói t·∫°o h·ªá th·ªëng ph√¢n t√≠ch t√†i ch√≠nh")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
            
    def option_3_validation(self):
        """T√πy ch·ªçn 3: Ki·ªÉm tra v√† validation"""
        print("\nüîç ƒêANG KI·ªÇM TRA V√Ä VALIDATION H·ªÜ TH·ªêNG...")
        print("-" * 60)
        
        # T√¨m file balance sheet m·ªõi nh·∫•t
        balance_files = [f for f in os.listdir('.') if f.startswith('bang_can_doi_ke_toan_dynamic_') and f.endswith('.xlsx')]
        
        if not balance_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n")
            print("üí° Vui l√≤ng ch·ªçn t√πy ch·ªçn 1 ƒë·ªÉ t·∫°o b·∫£ng c√¢n ƒë·ªëi tr∆∞·ªõc")
            return None
            
        latest_file = max(balance_files, key=os.path.getctime)
        print(f"üîç ƒêang ki·ªÉm tra file: {latest_file}")
        
        try:
            validator = FormulaValidator(latest_file)
            result = validator.run_complete_validation()
            
            self.validation_results.append({
                'filename': latest_file,
                'timestamp': datetime.datetime.now().isoformat(),
                'overall_status': validator.validation_results['overall_status'],
                'passed': result
            })
            
            if result:
                print(f"\nüéâ VALIDATION TH√ÄNH C√îNG!")
                print(f"üìä Tr·∫°ng th√°i: {validator.validation_results['overall_status'].upper()}")
            else:
                print(f"\n‚ö†Ô∏è  VALIDATION C·∫¶N C·∫¢I THI·ªÜN!")
                print(f"üìä Tr·∫°ng th√°i: {validator.validation_results['overall_status'].upper()}")
                
            return result
            
        except Exception as e:
            print(f"‚ùå L·ªói validation: {e}")
            return False
            
    def option_4_multi_period(self):
        """T√πy ch·ªçn 4: Ph√¢n t√≠ch nhi·ªÅu k·ª≥"""
        print("\nüìà ƒêANG T·∫†O H·ªÜ TH·ªêNG PH√ÇN T√çCH NHI·ªÄU K·ª≤...")
        print("-" * 60)
        
        try:
            analyzer = MultiPeriodAnalyzer(periods=3)
            filename = analyzer.generate_complete_analysis()
            
            if filename:
                self.generated_files.append({
                    'type': 'multi_period',
                    'filename': filename,
                    'timestamp': datetime.datetime.now().isoformat(),
                    'sheets': len(analyzer.sheets),
                    'periods': len(analyzer.periods_list)
                })
                
                print(f"\n‚úÖ TH√ÄNH C√îNG!")
                print(f"üìÅ File ƒë√£ t·∫°o: {filename}")
                print(f"üìä Sheets: {len(analyzer.sheets)}")
                print(f"üìà Periods: {len(analyzer.periods_list)}")
                return filename
            else:
                print("‚ùå L·ªói t·∫°o h·ªá th·ªëng ph√¢n t√≠ch nhi·ªÅu k·ª≥")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
            
    def option_5_complete_system(self):
        """T√πy ch·ªçn 5: T·∫°o to√†n b·ªô h·ªá th·ªëng t·ª± ƒë·ªông"""
        print("\nüöÄ ƒêANG T·∫†O TO√ÄN B·ªò H·ªÜ TH·ªêNG T·ª∞ ƒê·ªòNG...")
        print("=" * 80)
        
        success_count = 0
        total_steps = 4
        
        # B∆∞·ªõc 1: T·∫°o b·∫£ng c√¢n ƒë·ªëi
        print("\nüìã B∆Ø·ªöC 1/4: T·∫°o B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n")
        balance_file = self.option_1_balance_sheet()
        if balance_file:
            success_count += 1
            
        # B∆∞·ªõc 2: T·∫°o ph√¢n t√≠ch t√†i ch√≠nh
        print("\nüìã B∆Ø·ªöC 2/4: T·∫°o H·ªá th·ªëng Ph√¢n t√≠ch T√†i ch√≠nh")
        analysis_file = self.option_2_financial_analysis()
        if analysis_file:
            success_count += 1
            
        # B∆∞·ªõc 3: Validation
        print("\nüìã B∆Ø·ªöC 3/4: Ki·ªÉm tra v√† Validation")
        validation_result = self.option_3_validation()
        if validation_result:
            success_count += 1
            
        # B∆∞·ªõc 4: Ph√¢n t√≠ch nhi·ªÅu k·ª≥
        print("\nüìã B∆Ø·ªöC 4/4: T·∫°o Ph√¢n t√≠ch Nhi·ªÅu k·ª≥")
        multi_period_file = self.option_4_multi_period()
        if multi_period_file:
            success_count += 1
            
        # T·∫°o b√°o c√°o t·ªïng k·∫øt
        self.generate_summary_report()
        
        # K·∫øt qu·∫£
        print("\n" + "=" * 80)
        print("üéâ K·∫æT QU·∫¢ T·∫†O H·ªÜ TH·ªêNG HO√ÄN CH·ªàNH")
        print("=" * 80)
        print(f"‚úÖ Ho√†n th√†nh: {success_count}/{total_steps} b∆∞·ªõc")
        
        if success_count == total_steps:
            print("üéä TH√ÄNH C√îNG HO√ÄN TO√ÄN!")
            print("üöÄ H·ªá th·ªëng b√°o c√°o t√†i ch√≠nh ƒë·ªông ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!")
        elif success_count >= total_steps * 0.75:
            print("‚ö†Ô∏è  TH√ÄNH C√îNG PH·∫¶N L·ªöN - M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ c·∫ßn xem l·∫°i")
        else:
            print("‚ùå C·∫¶N KI·ªÇM TRA L·∫†I - Nhi·ªÅu b∆∞·ªõc g·∫∑p l·ªói")
            
        self.show_file_summary()
        return success_count == total_steps
        
    def option_6_file_list(self):
        """T√πy ch·ªçn 6: Xem danh s√°ch file ƒë√£ t·∫°o"""
        print("\nüìÅ DANH S√ÅCH FILE ƒê√É T·∫†O:")
        print("-" * 60)
        
        if not self.generated_files:
            print("üì≠ Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c t·∫°o")
            print("üí° S·ª≠ d·ª•ng c√°c t√πy ch·ªçn 1-5 ƒë·ªÉ t·∫°o file")
            return
            
        for i, file_info in enumerate(self.generated_files, 1):
            print(f"\nüìÑ File {i}:")
            print(f"   üìÅ T√™n: {file_info['filename']}")
            print(f"   üè∑Ô∏è  Lo·∫°i: {file_info['type']}")
            print(f"   üïê Th·ªùi gian: {file_info['timestamp']}")
            
            if file_info['type'] == 'balance_sheet':
                print(f"   üè∑Ô∏è  Named Ranges: {file_info.get('named_ranges', 'N/A')}")
            elif file_info['type'] == 'financial_analysis':
                print(f"   üìä Sheets: {file_info.get('sheets', 'N/A')}")
                print(f"   üî¢ Formulas: {file_info.get('formulas', 'N/A')}")
            elif file_info['type'] == 'multi_period':
                print(f"   üìä Sheets: {file_info.get('sheets', 'N/A')}")
                print(f"   üìà Periods: {file_info.get('periods', 'N/A')}")
                
        # Hi·ªÉn th·ªã validation results
        if self.validation_results:
            print(f"\nüîç K·∫æT QU·∫¢ VALIDATION:")
            for result in self.validation_results:
                status_icon = "‚úÖ" if result['passed'] else "‚ö†Ô∏è"
                print(f"   {status_icon} {result['filename']}: {result['overall_status'].upper()}")
                
    def option_7_help(self):
        """T√πy ch·ªçn 7: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        print("\nüìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG H·ªÜ TH·ªêNG")
        print("=" * 80)
        
        help_content = """
üéØ T·ªîNG QUAN:
H·ªá th·ªëng t·∫°o b√°o c√°o t√†i ch√≠nh v·ªõi c√¥ng th·ª©c Excel ƒë·ªông, tu√¢n th·ªß chu·∫©n k·∫ø to√°n Vi·ªát Nam.

üöÄ C√ÅCH S·ª¨ D·ª§NG NHANH:
1. Ch·ªçn t√πy ch·ªçn 5 ƒë·ªÉ t·∫°o to√†n b·ªô h·ªá th·ªëng t·ª± ƒë·ªông
2. M·ªü c√°c file Excel ƒë∆∞·ª£c t·∫°o
3. C·∫≠p nh·∫≠t d·ªØ li·ªáu trong b·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n
4. T·∫•t c·∫£ b√°o c√°o s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t theo d·ªØ li·ªáu m·ªõi

üìä C√ÅC TH√ÄNH PH·∫¶N CH√çNH:

üèóÔ∏è  1. B·∫¢NG C√ÇN ƒê·ªêI K·∫æ TO√ÅN:
   - C·∫•u tr√∫c theo chu·∫©n VAS/Circular 200/2014/TT-BTC
   - 40+ named ranges t·ª± ƒë·ªông
   - Ki·ªÉm tra ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi (Assets = Liabilities + Equity)
   - Sheet mapping v·ªõi m√£ k·∫ø to√°n Vi·ªát Nam

üìà 2. H·ªÜ TH·ªêNG PH√ÇN T√çCH T√ÄI CH√çNH:
   - 5 b√°o c√°o chuy√™n s√¢u + Dashboard
   - T·∫•t c·∫£ c√¥ng th·ª©c Excel tham chi·∫øu ƒë·ªông
   - ƒê√°nh gi√° t·ª± ƒë·ªông theo ti√™u chu·∫©n ng√†nh
   - Ph√¢n t√≠ch: Thanh kho·∫£n, Sinh l·ªùi, Hi·ªáu qu·∫£, C∆° c·∫•u t√†i ch√≠nh

üîç 3. VALIDATION H·ªÜ TH·ªêNG:
   - Ki·ªÉm tra ph∆∞∆°ng tr√¨nh c√¢n ƒë·ªëi
   - X√°c th·ª±c named ranges
   - Ph√°t hi·ªán l·ªói c√¥ng th·ª©c Excel
   - B√°o c√°o chi ti·∫øt v√† khuy·∫øn ngh·ªã

üìä 4. PH√ÇN T√çCH NHI·ªÄU K·ª≤:
   - So s√°nh 3+ k·ª≥ b√°o c√°o
   - Ph√¢n t√≠ch xu h∆∞·ªõng tƒÉng tr∆∞·ªüng
   - D·ª± b√°o t√†i ch√≠nh t·ª± ƒë·ªông
   - Bi·ªÉu ƒë·ªì v√† visualization

üí° M·∫∏O S·ª¨ D·ª§NG:
‚úì Lu√¥n backup file tr∆∞·ªõc khi thay ƒë·ªïi d·ªØ li·ªáu
‚úì S·ª≠ d·ª•ng validation tr∆∞·ªõc khi ph√¢n t√≠ch
‚úì C·∫≠p nh·∫≠t d·ªØ li·ªáu ·ªü sheet g·ªëc, c√°c b√°o c√°o s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t
‚úì Xem sheet "Mapping v√† C√¥ng th·ª©c" ƒë·ªÉ hi·ªÉu c√°ch ho·∫°t ƒë·ªông

üîß Y√äU C·∫¶U H·ªÜ TH·ªêNG:
- Excel 2016+ (khuy·∫øn ngh·ªã Excel 365)
- Python 3.8+ v·ªõi c√°c th∆∞ vi·ªán: openpyxl, pandas
- Windows/Mac/Linux

üìû H·ªñ TR·ª¢:
- Xem file README.md ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt
- Ki·ªÉm tra c√°c file JSON ƒë·ªÉ xem th√¥ng tin named ranges
- S·ª≠ d·ª•ng ch·ª©c nƒÉng validation ƒë·ªÉ ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ
"""
        print(help_content)
        
        print("\n" + "=" * 80)
        input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        
    def generate_summary_report(self):
        """T·∫°o b√°o c√°o t·ªïng k·∫øt"""
        try:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            report_filename = f"system_summary_report_{timestamp}.json"
            
            summary_data = {
                'system_info': self.system_info,
                'generation_time': datetime.datetime.now().isoformat(),
                'generated_files': self.generated_files,
                'validation_results': self.validation_results,
                'statistics': {
                    'total_files': len(self.generated_files),
                    'successful_validations': len([r for r in self.validation_results if r['passed']]),
                    'total_validations': len(self.validation_results)
                }
            }
            
            with open(report_filename, 'w', encoding='utf-8') as f:
                json.dump(summary_data, f, ensure_ascii=False, indent=2)
                
            print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o t·ªïng k·∫øt: {report_filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói t·∫°o b√°o c√°o t·ªïng k·∫øt: {e}")
            
    def show_file_summary(self):
        """Hi·ªÉn th·ªã t√≥m t·∫Øt file ƒë√£ t·∫°o"""
        print(f"\nüìã T√ìM T·∫ÆT FILE ƒê√É T·∫†O:")
        print("-" * 40)
        
        file_types = {}
        for file_info in self.generated_files:
            file_type = file_info['type']
            if file_type not in file_types:
                file_types[file_type] = []
            file_types[file_type].append(file_info['filename'])
            
        for file_type, files in file_types.items():
            icon_map = {
                'balance_sheet': 'üèóÔ∏è',
                'financial_analysis': 'üìä',
                'multi_period': 'üìà'
            }
            icon = icon_map.get(file_type, 'üìÑ')
            print(f"{icon} {file_type}: {len(files)} file(s)")
            for filename in files:
                print(f"   - {filename}")
                
    def run(self):
        """Ch·∫°y h·ªá th·ªëng ch√≠nh"""
        self.create_output_folder()
        self.print_banner()
        
        while True:
            self.print_menu()
            
            try:
                choice = input("üëâ Ch·ªçn t√πy ch·ªçn (1-8): ").strip()
                
                if choice == '1':
                    self.option_1_balance_sheet()
                elif choice == '2':
                    self.option_2_financial_analysis()
                elif choice == '3':
                    self.option_3_validation()
                elif choice == '4':
                    self.option_4_multi_period()
                elif choice == '5':
                    self.option_5_complete_system()
                elif choice == '6':
                    self.option_6_file_list()
                elif choice == '7':
                    self.option_7_help()
                elif choice == '8':
                    print("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng!")
                    print("üöÄ Ch√∫c b·∫°n ph√¢n t√≠ch t√†i ch√≠nh hi·ªáu qu·∫£!")
                    break
                else:
                    print("‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1-8.")
                    
            except KeyboardInterrupt:
                print("\n\nüëã ƒê√£ d·ª´ng h·ªá th·ªëng. T·∫°m bi·ªát!")
                break
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
                
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

if __name__ == "__main__":
    system = MainIntegrationSystem()
    system.run()